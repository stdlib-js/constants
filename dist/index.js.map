{
  "version": 3,
  "sources": ["../array/max-array-length/lib/index.js", "../array/max-typed-array-length/lib/index.js", "../array/lib/index.js", "../complex64/nan/lib/index.js", "../complex64/num-bytes/lib/index.js", "../complex64/zero/lib/index.js", "../complex64/lib/index.js", "../complex128/nan/lib/index.js", "../complex128/num-bytes/lib/index.js", "../complex128/zero/lib/index.js", "../complex128/lib/index.js", "../float16/cbrt-eps/lib/index.js", "../float16/eps/lib/index.js", "../float16/exponent-bias/lib/index.js", "../float16/max/lib/index.js", "../float16/max-safe-integer/lib/index.js", "../float16/min-safe-integer/lib/index.js", "../float16/ninf/lib/index.js", "../float16/num-bytes/lib/index.js", "../float16/pinf/lib/index.js", "../float16/precision/lib/index.js", "../float16/smallest-normal/lib/index.js", "../float16/smallest-subnormal/lib/index.js", "../float16/sqrt-eps/lib/index.js", "../float16/lib/index.js", "../float32/abs-mask/lib/index.js", "../float32/cbrt-eps/lib/index.js", "../float32/eps/lib/index.js", "../float32/exponent-bias/lib/index.js", "../float32/exponent-mask/lib/index.js", "../float32/max/lib/index.js", "../float32/max-safe-integer/lib/index.js", "../float32/min-safe-integer/lib/index.js", "../float32/ninf/lib/index.js", "../float32/num-bytes/lib/index.js", "../float32/pinf/lib/index.js", "../float32/precision/lib/index.js", "../float32/sign-mask/lib/index.js", "../float32/significand-mask/lib/index.js", "../float32/smallest-normal/lib/index.js", "../float32/smallest-subnormal/lib/index.js", "../float32/sqrt-eps/lib/index.js", "../float32/lib/index.js", "../float64/apery/lib/index.js", "../float64/catalan/lib/index.js", "../float64/cbrt-eps/lib/index.js", "../float64/e/lib/index.js", "../float64/eps/lib/index.js", "../float64/eulergamma/lib/index.js", "../float64/exponent-bias/lib/index.js", "../float64/fourth-pi/lib/index.js", "../float64/fourth-root-eps/lib/index.js", "../float64/gamma-lanczos-g/lib/index.js", "../float64/glaisher-kinkelin/lib/index.js", "../float64/half-ln-two/lib/index.js", "../float64/half-pi/lib/index.js", "../float64/high-word-abs-mask/lib/index.js", "../float64/high-word-exponent-mask/lib/index.js", "../float64/high-word-sign-mask/lib/index.js", "../float64/high-word-significand-mask/lib/index.js", "../float64/ln-half/lib/index.js", "../float64/ln-pi/lib/index.js", "../float64/ln-sqrt-two-pi/lib/index.js", "../float64/ln-ten/lib/index.js", "../float64/ln-two/lib/index.js", "../float64/ln-two-pi/lib/index.js", "../float64/log2-e/lib/index.js", "../float64/log10-e/lib/index.js", "../float64/max/lib/index.js", "../float64/max-base2-exponent/lib/index.js", "../float64/max-base2-exponent-subnormal/lib/index.js", "../float64/max-base10-exponent/lib/index.js", "../float64/max-base10-exponent-subnormal/lib/index.js", "../float64/max-ln/lib/index.js", "../float64/max-safe-fibonacci/lib/index.js", "../float64/max-safe-integer/lib/index.js", "../float64/max-safe-lucas/lib/index.js", "../float64/max-safe-nth-fibonacci/lib/index.js", "../float64/max-safe-nth-lucas/lib/index.js", "../float64/min-base2-exponent/lib/index.js", "../float64/min-base2-exponent-subnormal/lib/index.js", "../float64/min-base10-exponent/lib/index.js", "../float64/min-base10-exponent-subnormal/lib/index.js", "../float64/min-ln/lib/index.js", "../float64/min-safe-integer/lib/index.js", "../float64/ninf/lib/index.js", "../float64/num-bytes/lib/index.js", "../float64/phi/lib/index.js", "../float64/pi/lib/index.js", "../float64/pi-squared/lib/index.js", "../float64/pinf/lib/index.js", "../float64/precision/lib/index.js", "../float64/smallest-normal/lib/index.js", "../float64/smallest-subnormal/lib/index.js", "../float64/sqrt-eps/lib/index.js", "../float64/sqrt-half/lib/index.js", "../float64/sqrt-half-pi/lib/index.js", "../float64/sqrt-phi/lib/index.js", "../float64/sqrt-pi/lib/index.js", "../float64/sqrt-three/lib/index.js", "../float64/sqrt-two/lib/index.js", "../float64/sqrt-two-pi/lib/index.js", "../float64/two-pi/lib/index.js", "../float64/lib/index.js", "../int8/max/lib/index.js", "../int8/min/lib/index.js", "../int8/num-bytes/lib/index.js", "../int8/lib/index.js", "../int16/max/lib/index.js", "../int16/min/lib/index.js", "../int16/num-bytes/lib/index.js", "../int16/lib/index.js", "../int32/max/lib/index.js", "../int32/min/lib/index.js", "../int32/num-bytes/lib/index.js", "../int32/lib/index.js", "../path/delimiter-win32/lib/index.js", "../path/delimiter-posix/lib/index.js", "../path/delimiter/lib/index.js", "../path/sep-win32/lib/index.js", "../path/sep-posix/lib/index.js", "../path/sep/lib/index.js", "../path/lib/index.js", "../time/hours-in-day/lib/index.js", "../time/hours-in-week/lib/index.js", "../time/milliseconds-in-day/lib/index.js", "../time/milliseconds-in-hour/lib/index.js", "../time/milliseconds-in-minute/lib/index.js", "../time/milliseconds-in-second/lib/index.js", "../time/milliseconds-in-week/lib/index.js", "../time/minutes-in-day/lib/index.js", "../time/minutes-in-hour/lib/index.js", "../time/minutes-in-week/lib/index.js", "../time/months-in-year/lib/index.js", "../time/seconds-in-day/lib/index.js", "../time/seconds-in-hour/lib/index.js", "../time/seconds-in-minute/lib/index.js", "../time/seconds-in-week/lib/index.js", "../time/lib/index.js", "../uint8/max/lib/index.js", "../uint8/num-bytes/lib/index.js", "../uint8/lib/index.js", "../uint16/max/lib/index.js", "../uint16/num-bytes/lib/index.js", "../uint16/lib/index.js", "../uint32/max/lib/index.js", "../uint32/num-bytes/lib/index.js", "../uint32/lib/index.js", "../unicode/max/lib/index.js", "../unicode/max-bmp/lib/index.js", "../unicode/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a generic array.\n*\n* @module @stdlib/constants/array/max-array-length\n*\n* @example\n* var MAX_ARRAY_LENGTH = require( '@stdlib/constants/array/max-array-length' );\n* // returns 4294967295\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a generic array.\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MAX_ARRAY_LENGTH;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a typed array.\n*\n* @module @stdlib/constants/array/max-typed-array-length\n*\n* @example\n* var MAX_TYPED_ARRAY_LENGTH = require( '@stdlib/constants/array/max-typed-array-length' );\n* // returns 9007199254740991\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a typed array.\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n*/\nvar MAX_TYPED_ARRAY_LENGTH = 9007199254740991;\n\n\n// EXPORTS //\n\nmodule.exports = MAX_TYPED_ARRAY_LENGTH;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name MAX_ARRAY_LENGTH\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/array/max-array-length}\n*/\nsetReadOnly( ns, 'MAX_ARRAY_LENGTH', require( './../../array/max-array-length' ) );\n\n/**\n* @name MAX_TYPED_ARRAY_LENGTH\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/array/max-typed-array-length}\n*/\nsetReadOnly( ns, 'MAX_TYPED_ARRAY_LENGTH', require( './../../array/max-typed-array-length' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Canonical single-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex64/nan\n* @type {Complex64}\n*\n* @example\n* var COMPLEX64_NAN = require( '@stdlib/constants/complex64/nan' );\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex/float32' );\n\n\n// MAIN //\n\n/**\n* Canonical single-precision complex floating-point NaN.\n*\n* @constant\n* @type {Complex64}\n*/\nvar COMPLEX64_NAN = new Complex64( NaN, NaN );\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX64_NAN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @module @stdlib/constants/complex64/num-bytes\n* @type {integer32}\n*\n* @example\n* var COMPLEX64_NUM_BYTES = require( '@stdlib/constants/complex64/num-bytes' );\n* // returns 8\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 8\n*/\nvar COMPLEX64_NUM_BYTES = 8|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX64_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex64/zero\n* @type {Complex64}\n*\n* @example\n* var COMPLEX64_ZERO = require( '@stdlib/constants/complex64/zero' );\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nvar Complex64 = require( '@stdlib/complex/float32' );\n\n\n// MAIN //\n\n/**\n* Single-precision complex floating-point zero.\n*\n* @constant\n* @type {Complex64}\n*/\nvar COMPLEX64_ZERO = new Complex64( 0.0, 0.0 );\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX64_ZERO;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name NAN\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex64}\n* @see {@link module:@stdlib/constants/complex64/nan}\n*/\nsetReadOnly( ns, 'NAN', require( './../../complex64/nan' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/complex64/num-bytes}\n*/\nsetReadOnly( ns, 'NUM_BYTES', require( './../../complex64/num-bytes' ) );\n\n/**\n* @name ZERO\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex64}\n* @see {@link module:@stdlib/constants/complex64/zero}\n*/\nsetReadOnly( ns, 'ZERO', require( './../../complex64/zero' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Canonical double-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex128/nan\n* @type {Complex128}\n*\n* @example\n* var COMPLEX128_NAN = require( '@stdlib/constants/complex128/nan' );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar Complex128 = require( '@stdlib/complex/float64' );\n\n\n// MAIN //\n\n/**\n* Canonical double-precision complex floating-point NaN.\n*\n* @constant\n* @type {Complex128}\n*/\nvar COMPLEX128_NAN = new Complex128( NaN, NaN );\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX128_NAN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @module @stdlib/constants/complex128/num-bytes\n* @type {integer32}\n*\n* @example\n* var COMPLEX128_NUM_BYTES = require( '@stdlib/constants/complex128/num-bytes' );\n* // returns 16\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 16\n*/\nvar COMPLEX128_NUM_BYTES = 16|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX128_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex128/zero\n* @type {Complex128}\n*\n* @example\n* var COMPLEX128_ZERO = require( '@stdlib/constants/complex128/zero' );\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nvar Complex128 = require( '@stdlib/complex/float64' );\n\n\n// MAIN //\n\n/**\n* Double-precision complex floating-point zero.\n*\n* @constant\n* @type {Complex128}\n*/\nvar COMPLEX128_ZERO = new Complex128( 0.0, 0.0 );\n\n\n// EXPORTS //\n\nmodule.exports = COMPLEX128_ZERO;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name NAN\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex128}\n* @see {@link module:@stdlib/constants/complex128/nan}\n*/\nsetReadOnly( ns, 'NAN', require( './../../complex128/nan' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/complex128/num-bytes}\n*/\nsetReadOnly( ns, 'NUM_BYTES', require( './../../complex128/num-bytes' ) );\n\n/**\n* @name ZERO\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex128}\n* @see {@link module:@stdlib/constants/complex128/zero}\n*/\nsetReadOnly( ns, 'ZERO', require( './../../complex128/zero' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of half-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float16/cbrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT16_CBRT_EPSILON = require( '@stdlib/constants/float16/cbrt-eps' );\n* // returns 0.09921256574801247\n*/\n\n\n// MAIN //\n\n/**\n* Cube root of half-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{10}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.09921256574801247\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_CBRT_EPSILON = 0.09921256574801247;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_CBRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/eps\n* @type {number}\n*\n* @example\n* var FLOAT16_EPSILON = require( '@stdlib/constants/float16/eps' );\n* // returns 0.0009765625\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is equal to\n*\n* ```tex\n* \\frac{1}{2^{10}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0009765625\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_EPSILON = 0.0009765625; // In JavaScript, can only represent as a double-precision floating-point number (float64)\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a half-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float16/exponent-bias\n* @type {integer32}\n*\n* @example\n* var FLOAT16_EXPONENT_BIAS = require( '@stdlib/constants/float16/exponent-bias' );\n* // returns 15\n*/\n\n\n// MAIN //\n\n/**\n* The bias of a half-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 5\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 15\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_EXPONENT_BIAS = 15|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_EXPONENT_BIAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/max\n* @type {number}\n*\n* @example\n* var FLOAT16_MAX = require( '@stdlib/constants/float16/max' );\n* // returns 65504.0\n*/\n\n\n// MAIN //\n\n/**\n* The maximum half-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{15} (2 - 2^{-10})\n* ```\n*\n* @constant\n* @type {number}\n* @default 65504.0\n* @see [half-precision floating-point form]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MAX = 65504.0;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe half-precision floating-point integer.\n*\n* @module @stdlib/constants/float16/max-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT16_MAX_SAFE_INTEGER = require( '@stdlib/constants/float16/max-safe-integer' );\n* // returns 2047\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe half-precision floating-point integer.\n*\n* ## Notes\n*\n* The maximum is equal to\n*\n* ```tex\n* 2^{11} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 2047\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MAX_SAFE_INTEGER = 2047;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_MAX_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe half-precision floating-point integer.\n*\n* @module @stdlib/constants/float16/min-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT16_MIN_SAFE_INTEGER = require( '@stdlib/constants/float16/min-safe-integer' );\n* // returns -2047\n*/\n\n\n// MAIN //\n\n/**\n* The minimum safe half-precision floating-point integer.\n*\n* ## Notes\n*\n* The minimum is equal to\n*\n* ```tex\n* -(2^{11} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -2047\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MIN_SAFE_INTEGER = -2047;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_MIN_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Half-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float16/ninf\n* @type {number}\n*\n* @example\n* var FLOAT16_NINF = require( '@stdlib/constants/float16/ninf' );\n* // returns -infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number/ctor' );\n\n\n// MAIN //\n\n/**\n* Half-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Half-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111 0000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 16-bit integer `64512` and to the HEX value `0xfc00`.\n*\n* @constant\n* @type {number}\n* @default -infinity\n* @see [half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_NINF = Number.NEGATIVE_INFINITY; // TODO: if, and when, float16 is natively available, assign the true constant; otherwise, fall back to float64\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_NINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/num-bytes\n* @type {integer32}\n*\n* @example\n* var FLOAT16_NUM_BYTES = require( '@stdlib/constants/float16/num-bytes' );\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar FLOAT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Half-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float16/pinf\n* @type {number}\n*\n* @example\n* var FLOAT16_PINF = require( '@stdlib/constants/float16/pinf' );\n* // returns +infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number/ctor' );\n\n\n// MAIN //\n\n/**\n* Half-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Half-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111 0000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 16-bit integer `31744` and to the HEX value `0x7c00`.\n*\n* @constant\n* @type {number}\n* @default infinity\n* @see [half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_PINF = Number.POSITIVE_INFINITY; // TODO: if, and when, float16 is natively available, assign the true constant; otherwise, fall back to float64\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_PINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/precision\n* @type {integer32}\n*\n* @example\n* var FLOAT16_PRECISION = require( '@stdlib/constants/float16/precision' );\n* // returns 11\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a half-precision floating-point number is `10` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 11\n*/\nvar FLOAT16_PRECISION = 11|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_PRECISION;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive half-precision floating-point normal number.\n*\n* @module @stdlib/constants/float16/smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT16_SMALLEST_NORMAL = require( '@stdlib/constants/float16/smallest-normal' );\n* // returns 6.103515625e-5\n*/\n\n\n// MAIN //\n\n/**\n* Smallest positive half-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{15-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00001 0000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 6.103515625e-5\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_SMALLEST_NORMAL = 6.103515625e-5;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_SMALLEST_NORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive half-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float16/smallest-subnormal\n* @type {number}\n*\n* @example\n* var FLOAT16_SMALLEST_SUBNORMAL = require( '@stdlib/constants/float16/smallest-subnormal' );\n* // returns 5.960464477539063e-8\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive half-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{15-1} 2^{10}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000 0000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 5.960464477539063e-8\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_SMALLEST_SUBNORMAL = 5.960464477539063e-8;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_SMALLEST_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of half-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float16/sqrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT16_SQRT_EPSILON = require( '@stdlib/constants/float16/sqrt-eps' );\n* // returns 0.03125\n*/\n\n\n// MAIN //\n\n/**\n* Square root of half-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{10}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.03125\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_SQRT_EPSILON = 0.03125;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT16_SQRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/cbrt-eps}\n*/\nsetReadOnly( constants, 'CBRT_EPS', require( './../../float16/cbrt-eps' ) );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/eps}\n*/\nsetReadOnly( constants, 'EPS', require( './../../float16/eps' ) );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/exponent-bias}\n*/\nsetReadOnly( constants, 'EXPONENT_BIAS', require( './../../float16/exponent-bias' ) );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../float16/max' ) );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max-safe-integer}\n*/\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', require( './../../float16/max-safe-integer' ) );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/min-safe-integer}\n*/\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', require( './../../float16/min-safe-integer' ) );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/ninf}\n*/\nsetReadOnly( constants, 'NINF', require( './../../float16/ninf' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../float16/num-bytes' ) );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/pinf}\n*/\nsetReadOnly( constants, 'PINF', require( './../../float16/pinf' ) );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/precision}\n*/\nsetReadOnly( constants, 'PRECISION', require( './../../float16/precision' ) );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-normal}\n*/\nsetReadOnly( constants, 'SMALLEST_NORMAL', require( './../../float16/smallest-normal' ) );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-subnormal}\n*/\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', require( './../../float16/smallest-subnormal' ) );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/sqrt-eps}\n*/\nsetReadOnly( constants, 'SQRT_EPS', require( './../../float16/sqrt-eps' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/abs-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT32_ABS_MASK = require( '@stdlib/constants/float32/abs-mask' );\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111 11111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_ABS_MASK = 0x7fffffff>>>0;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_ABS_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of single-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float32/cbrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT32_CBRT_EPSILON = require( '@stdlib/constants/float32/cbrt-eps' );\n* // returns 0.004921566694974899\n*/\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Cube root of single-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{23}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.004921566694974899\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_CBRT_EPSILON = float64ToFloat32( 0.004921566601151848 );\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_CBRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/eps\n* @type {number}\n*\n* @example\n* var FLOAT32_EPSILON = require( '@stdlib/constants/float32/eps' );\n* // returns 1.1920928955078125e-7\n*/\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is equal to\n*\n* ```tex\n* \\frac{1}{2^{23}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1920928955078125e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_EPSILON = float64ToFloat32( 1.1920928955078125e-7 );\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a single-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float32/exponent-bias\n* @type {integer32}\n*\n* @example\n* var FLOAT32_EXPONENT_BIAS = require( '@stdlib/constants/float32/exponent-bias' );\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* The bias of a single-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 8\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 127\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_EXPONENT_BIAS = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_EXPONENT_BIAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the exponent of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/exponent-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT32_EXPONENT_MASK = require( '@stdlib/constants/float32/exponent-mask' );\n* // returns 2139095040\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the exponent of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the exponent of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2139095040 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_EXPONENT_MASK = 0x7f800000;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_EXPONENT_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max\n* @type {number}\n*\n* @example\n* var FLOAT32_MAX = require( '@stdlib/constants/float32/max' );\n* // returns 3.4028234663852886e+38\n*/\n\n\n// MAIN //\n\n/**\n* Maximum single-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{127} (2 - 2^{-23})\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.4028234663852886e+38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX = 3.4028234663852886e+38;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe single-precision floating-point integer.\n*\n* @module @stdlib/constants/float32/max-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT32_MAX_SAFE_INTEGER = require( '@stdlib/constants/float32/max-safe-integer' );\n* // returns 16777215\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe single-precision floating-point integer.\n*\n* ## Notes\n*\n* The maximum safe integer is given by\n*\n* ```tex\n* 2^{24} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 16777215\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_INTEGER = 16777215;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_MAX_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe single-precision floating-point integer.\n*\n* @module @stdlib/constants/float32/min-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT32_MIN_SAFE_INTEGER = require( '@stdlib/constants/float32/min-safe-integer' );\n* // returns -16777215\n*/\n\n\n// MAIN //\n\n/**\n* Minimum safe single-precision floating-point integer.\n*\n* ## Notes\n*\n* The minimum safe integer is given by\n*\n* ```tex\n* -(2^{24} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -16777215\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_SAFE_INTEGER = -16777215;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_MIN_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float32/ninf\n* @type {number}\n*\n* @example\n* var FLOAT32_NINF = require( '@stdlib/constants/float32/ninf' );\n* // returns -infinity\n*/\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nmodule.exports = v;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/num-bytes\n* @type {integer32}\n*\n* @example\n* var FLOAT32_NUM_BYTES = require( '@stdlib/constants/float32/num-bytes' );\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar FLOAT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float32/pinf\n* @type {number}\n*\n* @example\n* var FLOAT32_PINF = require( '@stdlib/constants/float32/pinf' );\n* // returns +infinity\n*/\n\n// MODULES //\n\nvar Float32Array = require( '@stdlib/array/float32' );\nvar Uint32Array = require( '@stdlib/array/uint32' );\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.\n*\n* @constant\n* @type {number}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_PINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nmodule.exports = v;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/precision\n* @type {integer32}\n*\n* @example\n* var FLOAT32_PRECISION = require( '@stdlib/constants/float32/precision' );\n* // returns 24\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a single-precision floating-point number is `23` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 24\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PRECISION = 24|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_PRECISION;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sign-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT32_SIGN_MASK = require( '@stdlib/constants/float32/sign-mask' );\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000 00000000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SIGN_MASK = 0x80000000>>>0;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_SIGN_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the significand of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/significand-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT32_SIGNIFICAND_MASK = require( '@stdlib/constants/float32/significand-mask' );\n* // returns 8388607\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the significand of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the significand of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 8388607 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000 11111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x007fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SIGNIFICAND_MASK = 0x007fffff;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_SIGNIFICAND_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point normal number.\n*\n* @module @stdlib/constants/float32/smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants/float32/smallest-normal' );\n* // returns 1.1754943508222875e-38\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive single-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000001 00000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1754943508222875e-38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_SMALLEST_NORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float32/smallest-subnormal\n* @type {number}\n*\n* @example\n* var FLOAT32_SMALLEST_SUBNORMAL = require( '@stdlib/constants/float32/smallest-subnormal' );\n* // returns 1.401298464324817e-45\n*/\n\n\n// MAIN //\n\n/**\n* Smallest positive single-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1} 2^{23}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000 00000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.401298464324817e-45\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_SUBNORMAL = 1.401298464324817e-45;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_SMALLEST_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of single-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float32/sqrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT32_SQRT_EPSILON = require( '@stdlib/constants/float32/sqrt-eps' );\n* // returns 0.0003452669770922512\n*/\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );\n\n\n// MAIN //\n\n/**\n* Square root of single-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{23}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0003452669770922512\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_SQRT_EPSILON = float64ToFloat32( 0.0003452669770922512 );\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT32_SQRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name ABS_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/abs-mask}\n*/\nsetReadOnly( constants, 'ABS_MASK', require( './../../float32/abs-mask' ) );\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/cbrt-eps}\n*/\nsetReadOnly( constants, 'CBRT_EPS', require( './../../float32/cbrt-eps' ) );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/eps}\n*/\nsetReadOnly( constants, 'EPS', require( './../../float32/eps' ) );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/exponent-bias}\n*/\nsetReadOnly( constants, 'EXPONENT_BIAS', require( './../../float32/exponent-bias' ) );\n\n/**\n* @name EXPONENT_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/exponent-mask}\n*/\nsetReadOnly( constants, 'EXPONENT_MASK', require( './../../float32/exponent-mask' ) );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../float32/max' ) );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-integer}\n*/\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', require( './../../float32/max-safe-integer' ) );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-safe-integer}\n*/\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', require( './../../float32/min-safe-integer' ) );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ninf}\n*/\nsetReadOnly( constants, 'NINF', require( './../../float32/ninf' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../float32/num-bytes' ) );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/pinf}\n*/\nsetReadOnly( constants, 'PINF', require( './../../float32/pinf' ) );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/precision}\n*/\nsetReadOnly( constants, 'PRECISION', require( './../../float32/precision' ) );\n\n/**\n* @name SIGN_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sign-mask}\n*/\nsetReadOnly( constants, 'SIGN_MASK', require( './../../float32/sign-mask' ) );\n\n/**\n* @name SIGNIFICAND_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/significand-mask}\n*/\nsetReadOnly( constants, 'SIGNIFICAND_MASK', require( './../../float32/significand-mask' ) );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-normal}\n*/\nsetReadOnly( constants, 'SMALLEST_NORMAL', require( './../../float32/smallest-normal' ) );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-subnormal}\n*/\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', require( './../../float32/smallest-subnormal' ) );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-eps}\n*/\nsetReadOnly( constants, 'SQRT_EPS', require( './../../float32/sqrt-eps' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Ap\u00E9ry's constant.\n*\n* @module @stdlib/constants/float64/apery\n* @type {number}\n*\n* @example\n* var APERY = require( '@stdlib/constants/float64/apery' );\n* // returns 1.2020569031595942\n*/\n\n\n// MAIN //\n\n/**\n* Ap\u00E9ry's constant.\n*\n* @constant\n* @type {number}\n* @default 1.2020569031595942\n* @see [OEIS]{@link https://oeis.org/A002117}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Ap%C3%A9ry%27s_constant}\n*/\nvar APERY = 1.20205690315959428539973816151144999076498629234049888179227155534183820578631309018645587360933525814619915; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = APERY;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Catalan's constant.\n*\n* @module @stdlib/constants/float64/catalan\n* @type {number}\n*\n* @example\n* var CATALAN = require( '@stdlib/constants/float64/catalan' );\n* // returns 0.915965594177219\n*/\n\n\n// MAIN //\n\n/**\n* Catalan's constant.\n*\n* @constant\n* @type {number}\n* @default 0.915965594177219\n* @see [OEIS]{@link http://oeis.org/A006752}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Catalan%27s_constant}\n*/\nvar CATALAN = 0.91596559417721901505460351493238411077414937428167213426649812;\n\n\n// EXPORTS //\n\nmodule.exports = CATALAN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/cbrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT64_CBRT_EPSILON = require( '@stdlib/constants/float64/cbrt-eps' );\n* // returns 0.0000060554544523933395\n*/\n\n\n// MAIN //\n\n/**\n* Cube root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0000060554544523933395\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_CBRT_EPSILON = 6.05545445239333906078989272793696693569753008995e-6;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_CBRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants/float64/e\n* @type {number}\n*\n* @example\n* var E = require( '@stdlib/constants/float64/e' );\n* // returns 2.718281828459045\n*/\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.718281828459045\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = 2.718281828459045235360287471352662497757247093699959574966;\n\n\n// EXPORTS //\n\nmodule.exports = E;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/eps\n* @type {number}\n*\n* @example\n* var FLOAT64_EPSILON = require( '@stdlib/constants/float64/eps' );\n* // returns 2.220446049250313e-16\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is\n*\n* ```tex\n* \\frac{1}{2^{52}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.220446049250313e-16\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @module @stdlib/constants/float64/eulergamma\n* @type {number}\n*\n* @example\n* var GAMMA = require( '@stdlib/constants/float64/eulergamma' );\n* // returns 0.5772156649015329\n*/\n\n\n// MAIN //\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @constant\n* @type {number}\n* @default 0.5772156649015329\n* @see [OEIS]{@link http://oeis.org/A001620}\n* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}\n*/\nvar GAMMA = 0.577215664901532860606512090082402431042;\n\n\n// EXPORTS //\n\nmodule.exports = GAMMA;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float64/exponent-bias\n* @type {integer32}\n*\n* @example\n* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants/float64/exponent-bias' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_EXPONENT_BIAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/fourth-pi\n* @type {number}\n*\n* @example\n* var FOURTH_PI = require( '@stdlib/constants/float64/fourth-pi' );\n* // returns 7.85398163397448309616e-1\n*/\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 7.85398163397448309616e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FOURTH_PI = 7.85398163397448309616e-1;\n\n\n// EXPORTS //\n\nmodule.exports = FOURTH_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fourth root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/fourth-root-eps\n* @type {number}\n*\n* @example\n* var FLOAT64_FOURTH_ROOT_EPS = require( '@stdlib/constants/float64/fourth-root-eps' );\n* // returns 0.0001220703125\n*/\n\n\n// MAIN //\n\n/**\n* Fourth root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\sqrt{\\frac{1}{2^{52}}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0001220703125\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_FOURTH_ROOT_EPS = 0.0001220703125;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_FOURTH_ROOT_EPS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @module @stdlib/constants/float64/gamma-lanczos-g\n* @type {number}\n*\n* @example\n* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants/float64/gamma-lanczos-g' );\n* // returns 10.900511\n*/\n\n\n// MAIN //\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @constant\n* @type {number}\n* @default 10.900511\n* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}\n*/\nvar FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_GAMMA_LANCZOS_G;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Glaisher-Kinkelin constant.\n*\n* @module @stdlib/constants/float64/glaisher-kinkelin\n* @type {number}\n*\n* @example\n* var A = require( '@stdlib/constants/float64/glaisher-kinkelin' );\n* // returns 1.2824271291006226\n*/\n\n\n// MAIN //\n\n/**\n* Glaisher-Kinkelin constant.\n*\n* @constant\n* @type {number}\n* @default 1.2824271291006226\n* @see [OEIS]{@link https://oeis.org/A074962}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Glaisher%E2%80%93Kinkelin_constant}\n*/\nvar A = 1.28242712910062263687534256886979172776768892732500119206374002174040630885882646112973649195820237439420646120; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = A;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2.\n*\n* @module @stdlib/constants/float64/half-ln-two\n* @type {number}\n*\n* @example\n* var HALF_LN2 = require( '@stdlib/constants/float64/half-ln-two' );\n* // returns 3.46573590279972654709e-01\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.46573590279972654709e-01\n*/\nvar HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF\n\n\n// EXPORTS //\n\nmodule.exports = HALF_LN2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/half-pi\n* @type {number}\n*\n* @example\n* var HALF_PI = require( '@stdlib/constants/float64/half-pi' );\n* // returns 1.5707963267948966\n*/\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963267948966\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar HALF_PI = 1.5707963267948966;\n\n\n// EXPORTS //\n\nmodule.exports = HALF_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_ABS_MASK = require( '@stdlib/constants/float64/high-word-abs-mask' );\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_ABS_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants/float64/high-word-exponent-mask' );\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_SIGN_MASK = require( '@stdlib/constants/float64/high-word-sign-mask' );\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_SIGN_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-significand-mask\n* @type {uinteger32}\n*\n* @example\n* var FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = require( '@stdlib/constants/float64/high-word-significand-mask' );\n* // returns 1048575\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 1048575 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x000fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `1/2`.\n*\n* @module @stdlib/constants/float64/ln-half\n* @type {number}\n*\n* @example\n* var LN_HALF = require( '@stdlib/constants/float64/ln-half' );\n* // returns -0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `1/2`.\n*\n* ```tex\n* \\ln (1/2)\n* ```\n*\n* @constant\n* @type {number}\n* @default -0.6931471805599453\n*/\nvar LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;\n\n\n// EXPORTS //\n\nmodule.exports = LN_HALF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/ln-pi\n* @type {number}\n*\n* @example\n* var LN_PI = require( '@stdlib/constants/float64/ln-pi' );\n* // returns 1.1447298858494002\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 1.1447298858494002\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar LN_PI = 1.1447298858494002;\n\n\n// EXPORTS //\n\nmodule.exports = LN_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the square root of `2\u03C0`.\n*\n* @module @stdlib/constants/float64/ln-sqrt-two-pi\n* @type {number}\n*\n* @example\n* var LN_SQRT_TWO_PI = require( '@stdlib/constants/float64/ln-sqrt-two-pi' );\n* // returns 0.9189385332046728\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the square root of `2\u03C0`.\n*\n* ```tex\n* \\ln \\sqrt{2\\pi}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.9189385332046728\n*/\nvar LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = LN_SQRT_TWO_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `10`.\n*\n* @module @stdlib/constants/float64/ln-ten\n* @type {number}\n*\n* @example\n* var LN10 = require( '@stdlib/constants/float64/ln-ten' );\n* // returns 2.302585092994046\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `10`.\n*\n* ```tex\n* \\ln 10\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.302585092994046\n*/\nvar LN10 = 2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = LN10;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2`.\n*\n* @module @stdlib/constants/float64/ln-two\n* @type {number}\n*\n* @example\n* var LN2 = require( '@stdlib/constants/float64/ln-two' );\n* // returns 0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2`.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471805599453\n*/\nvar LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = LN2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2\u03C0`.\n*\n* @module @stdlib/constants/float64/ln-two-pi\n* @type {number}\n*\n* @example\n* var LN_TWO_PI = require( '@stdlib/constants/float64/ln-two-pi' );\n* // returns 1.8378770664093456\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2\u03C0`.\n*\n* ```tex\n* \\ln 2\\pi\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.8378770664093456\n*/\nvar LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634;\n\n\n// EXPORTS //\n\nmodule.exports = LN_TWO_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Base 2 logarithm of Euler's number.\n*\n* @module @stdlib/constants/float64/log2-e\n* @type {number}\n*\n* @example\n* var LOG2E = require( '@stdlib/constants/float64/log2-e' );\n* // returns 1.4426950408889634\n*/\n\n\n// MAIN //\n\n/**\n* Base 2 logarithm of Euler's number.\n*\n* @constant\n* @type {number}\n* @default 1.4426950408889634\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_%27mathematical_constant%28}\n*/\nvar LOG2E = 1.442695040888963407359924681001892137426645954152985934135;\n\n\n// EXPORTS //\n\nmodule.exports = LOG2E;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Base 10 logarithm of Euler's number.\n*\n* @module @stdlib/constants/float64/log10-e\n* @type {number}\n*\n* @example\n* var LOG10E = require( '@stdlib/constants/float64/log10-e' );\n* // returns 0.4342944819032518\n*/\n\n\n// MAIN //\n\n/**\n* Base 10 logarithm of Euler's number.\n*\n* @constant\n* @type {number}\n* @default 0.4342944819032518\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_%27mathematical_constant%28}\n*/\nvar LOG10E = 4.34294481903251827651128918916605082294397005803666566114453783165864649208870774729224949338431748318706106745e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = LOG10E;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max\n* @type {number}\n*\n* @example\n* var FLOAT64_MAX = require( '@stdlib/constants/float64/max' );\n* // returns 1.7976931348623157e+308\n*/\n\n\n// MAIN //\n\n/**\n* Maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{1023} (2 - 2^{-52})\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7976931348623157e+308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX = 1.7976931348623157e+308;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base2-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants/float64/max-base2-exponent' );\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/max-base2-exponent-subnormal' );\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base10-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE10_EXPONENT = require( '@stdlib/constants/float64/max-base10-exponent' );\n* // returns 308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE10_EXPONENT;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/max-base10-exponent-subnormal' );\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 2^-1023 = 1.1125369292536007e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-ln\n* @type {number}\n*\n* @example\n* var FLOAT64_MAX_LN = require( '@stdlib/constants/float64/max-ln' );\n* // returns 709.782712893384\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The natural logarithm of the maximum is given by\n*\n* ```tex\n* \\ln \\left( 2^{1023} (2 - 2^{-52}) \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default 709.782712893384\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_LN = 709.782712893384;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_LN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe Fibonacci number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-fibonacci\n* @type {integer}\n*\n* @example\n* var FLOAT64_MAX_SAFE_FIBONACCI = require( '@stdlib/constants/float64/max-safe-fibonacci' );\n* // returns 8944394323791464\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe Fibonacci number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 8944394323791464\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_FIBONACCI = 8944394323791464;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_SAFE_FIBONACCI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants/float64/max-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT64_MAX_SAFE_INTEGER = require( '@stdlib/constants/float64/max-safe-integer' );\n* // returns 9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The integer has the value\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe Lucas number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-lucas\n* @type {integer}\n*\n* @example\n* var FLOAT64_MAX_SAFE_LUCAS = require( '@stdlib/constants/float64/max-safe-lucas' );\n* // returns 7639424778862807\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe Lucas number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 7639424778862807\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_LUCAS = 7639424778862807;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_SAFE_LUCAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-nth-fibonacci\n* @type {integer}\n*\n* @example\n* var FLOAT64_MAX_SAFE_NTH_FIBONACCI = require( '@stdlib/constants/float64/max-safe-nth-fibonacci' );\n* // returns 78\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 78\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_FIBONACCI = 78|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_SAFE_NTH_FIBONACCI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* Maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-nth-lucas\n* @type {integer}\n*\n* @example\n* var FLOAT64_MAX_SAFE_NTH_LUCAS = require( '@stdlib/constants/float64/max-safe-nth-lucas' );\n* // returns 76\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 76\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_LUCAS = 76|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MAX_SAFE_NTH_LUCAS;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base2-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE2_EXPONENT = require( '@stdlib/constants/float64/min-base2-exponent' );\n* // returns -1022\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 1 - BIAS = -1022\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1022\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE2_EXPONENT;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/min-base2-exponent-subnormal' );\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base10-exponent\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE10_EXPONENT = require( '@stdlib/constants/float64/min-base10-exponent' );\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 2^-1022 = 2.2250738585072014e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE10_EXPONENT;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = require( '@stdlib/constants/float64/min-base10-exponent-subnormal' );\n* // returns -324\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-ln\n* @type {number}\n*\n* @example\n* var FLOAT64_MIN_LN = require( '@stdlib/constants/float64/min-ln' );\n* // returns -708.3964185322641\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -\\ln \\left( 2^{1023-1} \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default -708.3964185322641\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_LN = -708.3964185322641;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_LN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants/float64/min-safe-integer\n* @type {number}\n*\n* @example\n* var FLOAT64_MIN_SAFE_INTEGER = require( '@stdlib/constants/float64/min-safe-integer' );\n* // returns -9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{53} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_SAFE_INTEGER = -9007199254740991;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_MIN_SAFE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float64/ninf\n* @type {number}\n*\n* @example\n* var FLOAT64_NINF = require( '@stdlib/constants/float64/ninf' );\n* // returns -Infinity\n*/\n\n// MODULES //\n\nvar Number = require( '@stdlib/number/ctor' );\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/num-bytes\n* @type {integer32}\n*\n* @example\n* var FLOAT64_NUM_BYTES = require( '@stdlib/constants/float64/num-bytes' );\n* // returns 8\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 8\n*/\nvar FLOAT64_NUM_BYTES = 8|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Golden ratio.\n*\n* @module @stdlib/constants/float64/phi\n* @type {number}\n*\n* @example\n* var PHI = require( '@stdlib/constants/float64/phi' );\n* // returns 1.618033988749895\n*/\n\n\n// MAIN //\n\n/**\n* Golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.618033988749895\n* @see [OEIS]{@link http://oeis.org/A001622}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar PHI = 1.61803398874989484820458683436563811772030917980576286213544862;\n\n\n// EXPORTS //\n\nmodule.exports = PHI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/pi\n* @type {number}\n*\n* @example\n* var PI = require( '@stdlib/constants/float64/pi' );\n* // returns 3.141592653589793\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 3.141592653589793\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square of the mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/pi-squared\n* @type {number}\n*\n* @example\n* var PI_SQUARED = require( '@stdlib/constants/float64/pi-squared' );\n* // returns 9.869604401089358\n*/\n\n\n// MAIN //\n\n/**\n* Square of the mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 9.869604401089358\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = PI_SQUARED;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float64/pinf\n* @type {number}\n*\n* @example\n* var FLOAT64_PINF = require( '@stdlib/constants/float64/pinf' );\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PINF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/precision\n* @type {integer32}\n*\n* @example\n* var FLOAT64_PRECISION = require( '@stdlib/constants/float64/precision' );\n* // returns 53\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a double-precision floating-point number is `52` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 53\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PRECISION = 53|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_PRECISION;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants/float64/smallest-normal\n* @type {number}\n*\n* @example\n* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants/float64/smallest-normal' );\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SMALLEST_NORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float64/smallest-subnormal\n* @type {number}\n*\n* @example\n* var FLOAT64_SMALLEST_SUBNORMAL = require( '@stdlib/constants/float64/smallest-subnormal' );\n* // returns 4.940656458412465e-324\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1} 2^{52}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 00000000000000000000 00000000000000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 4.940656458412465e-324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SMALLEST_SUBNORMAL;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/sqrt-eps\n* @type {number}\n*\n* @example\n* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants/float64/sqrt-eps' );\n* // returns 0.14901161193847656e-7\n*/\n\n\n// MAIN //\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.14901161193847656e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;\n\n\n// EXPORTS //\n\nmodule.exports = FLOAT64_SQRT_EPSILON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `1/2`.\n*\n* @module @stdlib/constants/float64/sqrt-half\n* @type {number}\n*\n* @example\n* var SQRT_HALF = require( '@stdlib/constants/float64/sqrt-half' );\n* // returns 0.7071067811865476\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `1/2`.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.7071067811865476\n*/\nvar SQRT_HALF = 7.07106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506923115e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = SQRT_HALF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `\u03C0` divided by `2`.\n*\n* @module @stdlib/constants/float64/sqrt-half-pi\n* @type {number}\n*\n* @example\n* var SQRT_HALF_PI = require( '@stdlib/constants/float64/sqrt-half-pi' );\n* // returns 1.2533141373155003\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `\u03C0` divided by `2`.\n*\n* @constant\n* @type {number}\n* @default 1.2533141373155003\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;\n\n\n// EXPORTS //\n\nmodule.exports = SQRT_HALF_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the golden ratio.\n*\n* @module @stdlib/constants/float64/sqrt-phi\n* @type {number}\n*\n* @example\n* var SQRT_PHI = require( '@stdlib/constants/float64/sqrt-phi' );\n* // returns 1.272019649514069\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.272019649514069\n* @see [OEIS]{@link http://oeis.org/A139339}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar SQRT_PHI = 1.27201964951406896425242246173749149171560804184009624861664038;\n\n\n// EXPORTS //\n\nmodule.exports = SQRT_PHI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `\u03C0`.\n*\n* @module @stdlib/constants/float64/sqrt-pi\n* @type {number}\n*\n* @example\n* var SQRT_PI = require( '@stdlib/constants/float64/sqrt-pi' );\n* // returns 1.7724538509055160\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `\u03C0`.\n*\n* @constant\n* @type {number}\n* @default 1.7724538509055160\n* @see [OEIS]{@link https://oeis.org/A002161}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;\n\n\n// EXPORTS //\n\nmodule.exports = SQRT_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `3`.\n*\n* @module @stdlib/constants/float64/sqrt-three\n* @type {number}\n*\n* @example\n* var SQRT3 = require( '@stdlib/constants/float64/sqrt-three' );\n* // returns 1.7320508075688772\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `3`.\n*\n* ```tex\n* \\sqrt{3}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7320508075688772\n*/\nvar SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00;\n\n\n// EXPORTS //\n\nmodule.exports = SQRT3;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `2`.\n*\n* @module @stdlib/constants/float64/sqrt-two\n* @type {number}\n*\n* @example\n* var SQRT2 = require( '@stdlib/constants/float64/sqrt-two' );\n* // returns 1.4142135623730951\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `2`.\n*\n* ```tex\n* \\sqrt{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.4142135623730951\n*/\nvar SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = SQRT2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `\u03C0` times `2`.\n*\n* @module @stdlib/constants/float64/sqrt-two-pi\n* @type {number}\n*\n* @example\n* var SQRT_TWO_PI = require( '@stdlib/constants/float64/sqrt-two-pi' );\n* // returns 2.5066282746310007\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `\u03C0` times `2`.\n*\n* @constant\n* @type {number}\n* @default 2.5066282746310007\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;\n\n\n// EXPORTS //\n\nmodule.exports = SQRT_TWO_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `\u03C0` times `2`.\n*\n* @module @stdlib/constants/float64/two-pi\n* @type {number}\n*\n* @example\n* var TWO_PI = require( '@stdlib/constants/float64/two-pi' );\n* // returns 6.283185307179586\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `\u03C0` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.283185307179586\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nmodule.exports = TWO_PI;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name APERY\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/apery}\n*/\nsetReadOnly( constants, 'APERY', require( './../../float64/apery' ) );\n\n/**\n* @name CATALAN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/catalan}\n*/\nsetReadOnly( constants, 'CATALAN', require( './../../float64/catalan' ) );\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/cbrt-eps}\n*/\nsetReadOnly( constants, 'CBRT_EPS', require( './../../float64/cbrt-eps' ) );\n\n/**\n* @name E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/e}\n*/\nsetReadOnly( constants, 'E', require( './../../float64/e' ) );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/eps}\n*/\nsetReadOnly( constants, 'EPS', require( './../../float64/eps' ) );\n\n/**\n* @name EULERGAMMA\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/eulergamma}\n*/\nsetReadOnly( constants, 'EULERGAMMA', require( './../../float64/eulergamma' ) );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/exponent-bias}\n*/\nsetReadOnly( constants, 'EXPONENT_BIAS', require( './../../float64/exponent-bias' ) );\n\n/**\n* @name FOURTH_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/fourth-pi}\n*/\nsetReadOnly( constants, 'FOURTH_PI', require( './../../float64/fourth-pi' ) );\n\n/**\n* @name FOURTH_ROOT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/fourth-root-eps}\n*/\nsetReadOnly( constants, 'FOURTH_ROOT_EPS', require( './../../float64/fourth-root-eps' ) );\n\n/**\n* @name GAMMA_LANCZOS_G\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/gamma-lanczos-g}\n*/\nsetReadOnly( constants, 'GAMMA_LANCZOS_G', require( './../../float64/gamma-lanczos-g' ) );\n\n/**\n* @name GLAISHER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/glaisher-kinkelin}\n*/\nsetReadOnly( constants, 'GLAISHER', require( './../../float64/glaisher-kinkelin' ) );\n\n/**\n* @name HALF_LN2\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/half-ln-two}\n*/\nsetReadOnly( constants, 'HALF_LN2', require( './../../float64/half-ln-two' ) );\n\n/**\n* @name HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/half-pi}\n*/\nsetReadOnly( constants, 'HALF_PI', require( './../../float64/half-pi' ) );\n\n/**\n* @name HIGH_WORD_ABS_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-abs-mask}\n*/\nsetReadOnly( constants, 'HIGH_WORD_ABS_MASK', require( './../../float64/high-word-abs-mask' ) );\n\n/**\n* @name HIGH_WORD_EXPONENT_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-exponent-mask}\n*/\nsetReadOnly( constants, 'HIGH_WORD_EXPONENT_MASK', require( './../../float64/high-word-exponent-mask' ) );\n\n/**\n* @name HIGH_WORD_SIGN_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-sign-mask}\n*/\nsetReadOnly( constants, 'HIGH_WORD_SIGN_MASK', require( './../../float64/high-word-sign-mask' ) );\n\n/**\n* @name HIGH_WORD_SIGNIFICAND_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-significand-mask}\n*/\nsetReadOnly( constants, 'HIGH_WORD_SIGNIFICAND_MASK', require( './../../float64/high-word-significand-mask' ) );\n\n/**\n* @name LN_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-half}\n*/\nsetReadOnly( constants, 'LN_HALF', require( './../../float64/ln-half' ) );\n\n/**\n* @name LN_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-pi}\n*/\nsetReadOnly( constants, 'LN_PI', require( './../../float64/ln-pi' ) );\n\n/**\n* @name LN_SQRT_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-sqrt-two-pi}\n*/\nsetReadOnly( constants, 'LN_SQRT_TWO_PI', require( './../../float64/ln-sqrt-two-pi' ) );\n\n/**\n* @name LN10\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-ten}\n*/\nsetReadOnly( constants, 'LN10', require( './../../float64/ln-ten' ) );\n\n/**\n* @name LN2\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-two}\n*/\nsetReadOnly( constants, 'LN2', require( './../../float64/ln-two' ) );\n\n/**\n* @name LN_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-two-pi}\n*/\nsetReadOnly( constants, 'LN_TWO_PI', require( './../../float64/ln-two-pi' ) );\n\n/**\n* @name LOG2E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/log2-e}\n*/\nsetReadOnly( constants, 'LOG2E', require( './../../float64/log2-e' ) );\n\n/**\n* @name LOG10E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/log10-e}\n*/\nsetReadOnly( constants, 'LOG10E', require( './../../float64/log10-e' ) );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../float64/max' ) );\n\n/**\n* @name MAX_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base2-exponent}\n*/\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT', require( './../../float64/max-base2-exponent' ) );\n\n/**\n* @name MAX_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base2-exponent-subnormal}\n*/\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT_SUBNORMAL', require( './../../float64/max-base2-exponent-subnormal' ) );\n\n/**\n* @name MAX_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base10-exponent}\n*/\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT', require( './../../float64/max-base10-exponent' ) );\n\n/**\n* @name MAX_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base10-exponent-subnormal}\n*/\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT_SUBNORMAL', require( './../../float64/max-base10-exponent-subnormal' ) );\n\n/**\n* @name MAX_LN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-ln}\n*/\nsetReadOnly( constants, 'MAX_LN', require( './../../float64/max-ln' ) );\n\n/**\n* @name MAX_SAFE_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-fibonacci}\n*/\nsetReadOnly( constants, 'MAX_SAFE_FIBONACCI', require( './../../float64/max-safe-fibonacci' ) );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-integer}\n*/\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', require( './../../float64/max-safe-integer' ) );\n\n/**\n* @name MAX_SAFE_LUCAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-lucas}\n*/\nsetReadOnly( constants, 'MAX_SAFE_LUCAS', require( './../../float64/max-safe-lucas' ) );\n\n/**\n* @name MAX_SAFE_NTH_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-nth-fibonacci}\n*/\nsetReadOnly( constants, 'MAX_SAFE_NTH_FIBONACCI', require( './../../float64/max-safe-nth-fibonacci' ) );\n\n/**\n* @name MAX_SAFE_NTH_LUCAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-nth-lucas}\n*/\nsetReadOnly( constants, 'MAX_SAFE_NTH_LUCAS', require( './../../float64/max-safe-nth-lucas' ) );\n\n/**\n* @name MIN_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base2-exponent}\n*/\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT', require( './../../float64/min-base2-exponent' ) );\n\n/**\n* @name MIN_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base2-exponent-subnormal}\n*/\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT_SUBNORMAL', require( './../../float64/min-base2-exponent-subnormal' ) );\n\n/**\n* @name MIN_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base10-exponent}\n*/\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT', require( './../../float64/min-base10-exponent' ) );\n\n/**\n* @name MIN_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base10-exponent-subnormal}\n*/\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT_SUBNORMAL', require( './../../float64/min-base10-exponent-subnormal' ) );\n\n/**\n* @name MIN_LN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-ln}\n*/\nsetReadOnly( constants, 'MIN_LN', require( './../../float64/min-ln' ) );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-safe-integer}\n*/\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', require( './../../float64/min-safe-integer' ) );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ninf}\n*/\nsetReadOnly( constants, 'NINF', require( './../../float64/ninf' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../float64/num-bytes' ) );\n\n/**\n* @name PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/phi}\n*/\nsetReadOnly( constants, 'PHI', require( './../../float64/phi' ) );\n\n/**\n* @name PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pi}\n*/\nsetReadOnly( constants, 'PI', require( './../../float64/pi' ) );\n\n/**\n* @name PI_SQUARED\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pi-squared}\n*/\nsetReadOnly( constants, 'PI_SQUARED', require( './../../float64/pi-squared' ) );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pinf}\n*/\nsetReadOnly( constants, 'PINF', require( './../../float64/pinf' ) );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/precision}\n*/\nsetReadOnly( constants, 'PRECISION', require( './../../float64/precision' ) );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/smallest-normal}\n*/\nsetReadOnly( constants, 'SMALLEST_NORMAL', require( './../../float64/smallest-normal' ) );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/smallest-subnormal}\n*/\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', require( './../../float64/smallest-subnormal' ) );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-eps}\n*/\nsetReadOnly( constants, 'SQRT_EPS', require( './../../float64/sqrt-eps' ) );\n\n/**\n* @name SQRT_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-half}\n*/\nsetReadOnly( constants, 'SQRT_HALF', require( './../../float64/sqrt-half' ) );\n\n/**\n* @name SQRT_HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-half-pi}\n*/\nsetReadOnly( constants, 'SQRT_HALF_PI', require( './../../float64/sqrt-half-pi' ) );\n\n/**\n* @name SQRT_PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-phi}\n*/\nsetReadOnly( constants, 'SQRT_PHI', require( './../../float64/sqrt-phi' ) );\n\n/**\n* @name SQRT_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-pi}\n*/\nsetReadOnly( constants, 'SQRT_PI', require( './../../float64/sqrt-pi' ) );\n\n/**\n* @name SQRT_THREE\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-three}\n*/\nsetReadOnly( constants, 'SQRT_THREE', require( './../../float64/sqrt-three' ) );\n\n/**\n* @name SQRT_TWO\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-two}\n*/\nsetReadOnly( constants, 'SQRT_TWO', require( './../../float64/sqrt-two' ) );\n\n/**\n* @name SQRT_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-two-pi}\n*/\nsetReadOnly( constants, 'SQRT_TWO_PI', require( './../../float64/sqrt-two-pi' ) );\n\n/**\n* @name TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/two-pi}\n*/\nsetReadOnly( constants, 'TWO_PI', require( './../../float64/two-pi' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 8-bit integer.\n*\n* @module @stdlib/constants/int8/max\n* @type {integer32}\n*\n* @example\n* var INT8_MAX = require( '@stdlib/constants/int8/max' );\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* 2^{7} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 127\n*/\nvar INT8_MAX = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT8_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 8-bit integer.\n*\n* @module @stdlib/constants/int8/min\n* @type {integer32}\n*\n* @example\n* var INT8_MIN = require( '@stdlib/constants/int8/min' );\n* // returns -128\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* -(2^{7})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -128\n*/\nvar INT8_MIN = -128|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT8_MIN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of an 8-bit signed integer.\n*\n* @module @stdlib/constants/int8/num-bytes\n* @type {integer32}\n*\n* @example\n* var INT8_NUM_BYTES = require( '@stdlib/constants/int8/num-bytes' );\n* // returns 1\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of an 8-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 1\n*/\nvar INT8_NUM_BYTES = 1|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT8_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../int8/max' ) );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/min}\n*/\nsetReadOnly( constants, 'MIN', require( './../../int8/min' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../int8/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 16-bit integer.\n*\n* @module @stdlib/constants/int16/max\n* @type {integer32}\n*\n* @example\n* var INT16_MAX = require( '@stdlib/constants/int16/max' );\n* // returns 32767\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{15} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 32767\n*/\nvar INT16_MAX = 32767|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT16_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 16-bit integer.\n*\n* @module @stdlib/constants/int16/min\n* @type {integer32}\n*\n* @example\n* var INT16_MIN = require( '@stdlib/constants/int16/min' );\n* // returns -32768\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{15})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 1000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -32768\n*/\nvar INT16_MIN = -32768|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT16_MIN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 16-bit signed integer.\n*\n* @module @stdlib/constants/int16/num-bytes\n* @type {integer32}\n*\n* @example\n* var INT16_NUM_BYTES = require( '@stdlib/constants/int16/num-bytes' );\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 16-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar INT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT16_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../int16/max' ) );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/min}\n*/\nsetReadOnly( constants, 'MIN', require( './../../int16/min' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../int16/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 32-bit integer.\n*\n* @module @stdlib/constants/int32/max\n* @type {integer32}\n*\n* @example\n* var INT32_MAX = require( '@stdlib/constants/int32/max' );\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{31} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 2147483647\n*/\nvar INT32_MAX = 2147483647|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT32_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 32-bit integer.\n*\n* @module @stdlib/constants/int32/min\n* @type {integer32}\n*\n* @example\n* var INT32_MIN = require( '@stdlib/constants/int32/min' );\n* // returns -2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{31})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -2147483648\n*/\nvar INT32_MIN = -2147483648|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT32_MIN;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 32-bit signed integer.\n*\n* @module @stdlib/constants/int32/num-bytes\n* @type {integer32}\n*\n* @example\n* var INT32_NUM_BYTES = require( '@stdlib/constants/int32/num-bytes' );\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 32-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar INT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = INT32_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../int32/max' ) );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/min}\n*/\nsetReadOnly( constants, 'MIN', require( './../../int32/min' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../int32/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Windows path delimiter.\n*\n* @module @stdlib/constants/path/delimiter-win32\n* @type {string}\n*\n* @example\n* var PATH_DELIMITER_WIN32 = require( '@stdlib/constants/path/delimiter-win32' );\n*\n* var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n* var paths = PATH.split( PATH_DELIMITER_WIN32 );\n* // returns ['C:\\\\Windows\\\\system32','C:\\\\Windows','C:\\\\Program Files\\\\node\\\\']\n*/\n\n// MAIN //\n\n/**\n* Path delimiter on Windows platforms.\n*\n* @constant\n* @type {string}\n* @default ';'\n*/\nvar PATH_DELIMITER_WIN32 = ';';\n\n\n// EXPORTS //\n\nmodule.exports = PATH_DELIMITER_WIN32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* POSIX path delimiter.\n*\n* @module @stdlib/constants/path/delimiter-posix\n* @type {string}\n*\n* @example\n* var PATH_DELIMITER_POSIX = require( '@stdlib/constants/path/delimiter-posix' );\n*\n* var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n* var paths = PATH.split( PATH_DELIMITER_POSIX );\n* // returns ['/usr/bin','/bin','/usr/sbin','/sbin','/usr/local/bin']\n*/\n\n// MAIN //\n\n/**\n* Path delimiter on POSIX platforms.\n*\n* @constant\n* @type {string}\n* @default ':'\n*/\nvar PATH_DELIMITER_POSIX = ':';\n\n\n// EXPORTS //\n\nmodule.exports = PATH_DELIMITER_POSIX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Platform-specific path delimiter.\n*\n* @module @stdlib/constants/path/delimiter\n* @type {string}\n*\n* @example\n* var IS_WINDOWS = require( '@stdlib/assert/is-windows' );\n* var PATH_DELIMITER = require( '@stdlib/constants/path/delimiter' );\n*\n* var PATH;\n* var paths;\n*\n* if ( IS_WINDOWS ) {\n*     PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n*     paths = PATH.split( PATH_DELIMITER );\n*     // returns ['C:\\\\Windows\\\\system32','C:\\\\Windows','C:\\\\Program Files\\\\node\\\\']\n* } else {\n*     PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n*     paths = PATH.split( PATH_DELIMITER );\n*     // returns ['/usr/bin','/bin','/usr/sbin','/sbin','/usr/local/bin']\n* }\n*/\n\n// MODULES //\n\nvar IS_WINDOWS = require( '@stdlib/assert/is-windows' );\nvar PATH_DELIMITER_WIN32 = require( './../../../path/delimiter-win32' );\nvar PATH_DELIMITER_POSIX = require( './../../../path/delimiter-posix' );\n\n\n// MAIN //\n\nvar PATH_DELIMITER;\nif ( IS_WINDOWS ) {\n\tPATH_DELIMITER = PATH_DELIMITER_WIN32;\n} else {\n\tPATH_DELIMITER = PATH_DELIMITER_POSIX;\n}\n\n\n// EXPORTS //\n\nmodule.exports = PATH_DELIMITER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Windows path segment separator.\n*\n* @module @stdlib/constants/path/sep-win32\n* @type {string}\n*\n* @example\n* var PATH_SEP_WIN32 = require( '@stdlib/constants/path/sep-win32' );\n*\n* var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 );\n* // returns ['foo','bar','baz']\n*/\n\n// MAIN //\n\n/**\n* Path segment separator on Windows platforms.\n*\n* @constant\n* @type {string}\n* @default '\\\\'\n*/\nvar PATH_SEP_WIN32 = '\\\\';\n\n\n// EXPORTS //\n\nmodule.exports = PATH_SEP_WIN32;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* POSIX path segment separator.\n*\n* @module @stdlib/constants/path/sep-posix\n* @type {string}\n*\n* @example\n* var PATH_SEP_POSIX = require( '@stdlib/constants/path/sep-posix' );\n*\n* var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX );\n* // returns ['foo','bar','baz']\n*/\n\n// MAIN //\n\n/**\n* Path segment separator on POSIX platforms.\n*\n* @constant\n* @type {string}\n* @default '/'\n*/\nvar PATH_SEP_POSIX = '/';\n\n\n// EXPORTS //\n\nmodule.exports = PATH_SEP_POSIX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Platform-specific path segment separator.\n*\n* @module @stdlib/constants/path/sep\n* @type {string}\n*\n* @example\n* var IS_WINDOWS = require( '@stdlib/assert/is-windows' );\n* var PATH_SEP = require( '@stdlib/constants/path/sep' );\n*\n* var parts;\n* if ( IS_WINDOWS ) {\n*     parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP );\n*     // returns ['foo','bar','baz']\n* } else {\n*     parts = 'foo/bar/baz'.split( PATH_SEP );\n*     // returns ['foo','bar','baz']\n* }\n*/\n\n// MODULES //\n\nvar IS_WINDOWS = require( '@stdlib/assert/is-windows' );\nvar PATH_SEP_WIN32 = require( './../../../path/sep-win32' );\nvar PATH_SEP_POSIX = require( './../../../path/sep-posix' );\n\n\n// MAIN //\n\nvar PATH_SEP;\nif ( IS_WINDOWS ) {\n\tPATH_SEP = PATH_SEP_WIN32;\n} else {\n\tPATH_SEP = PATH_SEP_POSIX;\n}\n\n\n// EXPORTS //\n\nmodule.exports = PATH_SEP;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name DELIMITER\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter}\n*/\nsetReadOnly( ns, 'DELIMITER', require( './../../path/delimiter' ) );\n\n/**\n* @name DELIMITER_POSIX\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter-posix}\n*/\nsetReadOnly( ns, 'DELIMITER_POSIX', require( './../../path/delimiter-posix' ) );\n\n/**\n* @name DELIMITER_WIN32\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter-win32}\n*/\nsetReadOnly( ns, 'DELIMITER_WIN32', require( './../../path/delimiter-win32' ) );\n\n/**\n* @name SEP\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep}\n*/\nsetReadOnly( ns, 'SEP', require( './../../path/sep' ) );\n\n/**\n* @name SEP_POSIX\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep-posix}\n*/\nsetReadOnly( ns, 'SEP_POSIX', require( './../../path/sep-posix' ) );\n\n/**\n* @name SEP_WIN32\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep-win32}\n*/\nsetReadOnly( ns, 'SEP_WIN32', require( './../../path/sep-win32' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of hours in a day.\n*\n* @module @stdlib/constants/time/hours-in-day\n* @type {integer32}\n*\n* @example\n* var HOURS_IN_DAY = require( '@stdlib/constants/time/hours-in-day' );\n* // returns 24\n*/\n\n\n// MAIN //\n\n/**\n* The number of hours in a day.\n*\n* @constant\n* @type {integer32}\n* @default 24\n*/\nvar HOURS_IN_DAY = 24|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = HOURS_IN_DAY;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of hours in a week.\n*\n* @module @stdlib/constants/time/hours-in-week\n* @type {integer32}\n*\n* @example\n* var HOURS_IN_WEEK = require( '@stdlib/constants/time/hours-in-week' );\n* // returns 168\n*/\n\n\n// MAIN //\n\n/**\n* The number of hours in a week.\n*\n* ```tex\n* 7 \\cdot 24 = 168\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 168\n*/\nvar HOURS_IN_WEEK = 168|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = HOURS_IN_WEEK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a day.\n*\n* @module @stdlib/constants/time/milliseconds-in-day\n* @type {integer32}\n*\n* @example\n* var MILLISECONDS_IN_DAY = require( '@stdlib/constants/time/milliseconds-in-day' );\n* // returns 86400000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a day.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 \\cdot 24 = 86400000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 86400000\n*/\nvar MILLISECONDS_IN_DAY = 86400000|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MILLISECONDS_IN_DAY;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in an hour.\n*\n* @module @stdlib/constants/time/milliseconds-in-hour\n* @type {integer32}\n*\n* @example\n* var MILLISECONDS_IN_HOUR = require( '@stdlib/constants/time/milliseconds-in-hour' );\n* // returns 3600000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in an hour.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 = 3600000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 3600000\n*/\nvar MILLISECONDS_IN_HOUR = 3600000|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MILLISECONDS_IN_HOUR;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a minute.\n*\n* @module @stdlib/constants/time/milliseconds-in-minute\n* @type {integer32}\n*\n* @example\n* var MILLISECONDS_IN_MINUTE = require( '@stdlib/constants/time/milliseconds-in-minute' );\n* // returns 60000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a minute.\n*\n* ```tex\n* 1000 \\cdot 60 = 60000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 60000\n*/\nvar MILLISECONDS_IN_MINUTE = 60000|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MILLISECONDS_IN_MINUTE;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a second.\n*\n* @module @stdlib/constants/time/milliseconds-in-second\n* @type {integer32}\n*\n* @example\n* var MILLISECONDS_IN_SECOND = require( '@stdlib/constants/time/milliseconds-in-second' );\n* // returns 1000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a second.\n*\n* @constant\n* @type {integer32}\n* @default 1000\n*/\nvar MILLISECONDS_IN_SECOND = 1000|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MILLISECONDS_IN_SECOND;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a week.\n*\n* @module @stdlib/constants/time/milliseconds-in-week\n* @type {integer32}\n*\n* @example\n* var MILLISECONDS_IN_WEEK = require( '@stdlib/constants/time/milliseconds-in-week' );\n* // returns 604800000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a week.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 \\cdot 24 \\cdot 7 = 604800000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 604800000\n*/\nvar MILLISECONDS_IN_WEEK = 604800000|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MILLISECONDS_IN_WEEK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in a day.\n*\n* @module @stdlib/constants/time/minutes-in-day\n* @type {integer32}\n*\n* @example\n* var MINUTES_IN_DAY = require( '@stdlib/constants/time/minutes-in-day' );\n* // returns 1440\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in a day.\n*\n* ```tex\n* 60 \\cdot 24 = 1440\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 1440\n*/\nvar MINUTES_IN_DAY = 1440|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MINUTES_IN_DAY;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in an hour.\n*\n* @module @stdlib/constants/time/minutes-in-hour\n* @type {integer32}\n*\n* @example\n* var MINUTES_IN_HOUR = require( '@stdlib/constants/time/minutes-in-hour' );\n* // returns 60\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in an hour.\n*\n* @constant\n* @type {integer32}\n* @default 60\n*/\nvar MINUTES_IN_HOUR = 60|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MINUTES_IN_HOUR;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in a week.\n*\n* @module @stdlib/constants/time/minutes-in-week\n* @type {integer32}\n*\n* @example\n* var MINUTES_IN_WEEK = require( '@stdlib/constants/time/minutes-in-week' );\n* // returns 10080\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in a week.\n*\n* ```tex\n* 60 \\cdot 24 \\cdot 7 = 10080\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 10080\n*/\nvar MINUTES_IN_WEEK = 10080|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MINUTES_IN_WEEK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of months in a year.\n*\n* @module @stdlib/constants/time/months-in-year\n* @type {integer32}\n*\n* @example\n* var MONTHS_IN_YEAR = require( '@stdlib/constants/time/months-in-year' );\n* // returns 12\n*/\n\n\n// MAIN //\n\n/**\n* The number of months in a year.\n*\n* @constant\n* @type {integer32}\n* @default 12\n*/\nvar MONTHS_IN_YEAR = 12|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = MONTHS_IN_YEAR;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a day.\n*\n* @module @stdlib/constants/time/seconds-in-day\n* @type {integer32}\n*\n* @example\n* var SECONDS_IN_DAY = require( '@stdlib/constants/time/seconds-in-day' );\n* // returns 86400\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a day.\n*\n* ```tex\n* 60 \\cdot 60 \\cdot 24 = 86400\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 86400\n*/\nvar SECONDS_IN_DAY = 86400|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = SECONDS_IN_DAY;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in an hour.\n*\n* @module @stdlib/constants/time/seconds-in-hour\n* @type {integer32}\n*\n* @example\n* var SECONDS_IN_HOUR = require( '@stdlib/constants/time/seconds-in-hour' );\n* // returns 3600\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in an hour.\n*\n* ```tex\n* 60 \\cdot 60 = 3600\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 3600\n*/\nvar SECONDS_IN_HOUR = 3600|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = SECONDS_IN_HOUR;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a minute.\n*\n* @module @stdlib/constants/time/seconds-in-minute\n* @type {integer32}\n*\n* @example\n* var SECONDS_IN_MINUTE = require( '@stdlib/constants/time/seconds-in-minute' );\n* // returns 60\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a minute.\n*\n* @constant\n* @type {integer32}\n* @default 60\n*/\nvar SECONDS_IN_MINUTE = 60|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = SECONDS_IN_MINUTE;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a week.\n*\n* @module @stdlib/constants/time/seconds-in-week\n* @type {integer32}\n*\n* @example\n* var SECONDS_IN_WEEK = require( '@stdlib/constants/time/seconds-in-week' );\n* // returns 604800\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a week.\n*\n* ```tex\n* 60 \\cdot 60 \\cdot 24 \\cdot 7 = 604800\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 604800\n*/\nvar SECONDS_IN_WEEK = 604800|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = SECONDS_IN_WEEK;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name HOURS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/hours-in-day}\n*/\nsetReadOnly( ns, 'HOURS_IN_DAY', require( './../../time/hours-in-day' ) );\n\n/**\n* @name HOURS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/hours-in-week}\n*/\nsetReadOnly( ns, 'HOURS_IN_WEEK', require( './../../time/hours-in-week' ) );\n\n/**\n* @name MILLISECONDS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-day}\n*/\nsetReadOnly( ns, 'MILLISECONDS_IN_DAY', require( './../../time/milliseconds-in-day' ) );\n\n/**\n* @name MILLISECONDS_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-hour}\n*/\nsetReadOnly( ns, 'MILLISECONDS_IN_HOUR', require( './../../time/milliseconds-in-hour' ) );\n\n/**\n* @name MILLISECONDS_IN_MINUTE\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-minute}\n*/\nsetReadOnly( ns, 'MILLISECONDS_IN_MINUTE', require( './../../time/milliseconds-in-minute' ) );\n\n/**\n* @name MILLISECONDS_IN_SECOND\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-second}\n*/\nsetReadOnly( ns, 'MILLISECONDS_IN_SECOND', require( './../../time/milliseconds-in-second' ) );\n\n/**\n* @name MILLISECONDS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-week}\n*/\nsetReadOnly( ns, 'MILLISECONDS_IN_WEEK', require( './../../time/milliseconds-in-week' ) );\n\n/**\n* @name MINUTES_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-day}\n*/\nsetReadOnly( ns, 'MINUTES_IN_DAY', require( './../../time/minutes-in-day' ) );\n\n/**\n* @name MINUTES_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-hour}\n*/\nsetReadOnly( ns, 'MINUTES_IN_HOUR', require( './../../time/minutes-in-hour' ) );\n\n/**\n* @name MINUTES_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-week}\n*/\nsetReadOnly( ns, 'MINUTES_IN_WEEK', require( './../../time/minutes-in-week' ) );\n\n/**\n* @name MONTHS_IN_YEAR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/months-in-year}\n*/\nsetReadOnly( ns, 'MONTHS_IN_YEAR', require( './../../time/months-in-year' ) );\n\n/**\n* @name SECONDS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-day}\n*/\nsetReadOnly( ns, 'SECONDS_IN_DAY', require( './../../time/seconds-in-day' ) );\n\n/**\n* @name SECONDS_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-hour}\n*/\nsetReadOnly( ns, 'SECONDS_IN_HOUR', require( './../../time/seconds-in-hour' ) );\n\n/**\n* @name SECONDS_IN_MINUTE\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-minute}\n*/\nsetReadOnly( ns, 'SECONDS_IN_MINUTE', require( './../../time/seconds-in-minute' ) );\n\n/**\n* @name SECONDS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-week}\n*/\nsetReadOnly( ns, 'SECONDS_IN_WEEK', require( './../../time/seconds-in-week' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants/uint8/max\n* @type {integer32}\n*\n* @example\n* var UINT8_MAX = require( '@stdlib/constants/uint8/max' );\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT8_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @module @stdlib/constants/uint8/num-bytes\n* @type {integer32}\n*\n* @example\n* var UINT8_NUM_BYTES = require( '@stdlib/constants/uint8/num-bytes' );\n* // returns 1\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 1\n*/\nvar UINT8_NUM_BYTES = 1|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT8_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint8/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../uint8/max' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint8/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../uint8/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants/uint16/max\n* @type {integer32}\n*\n* @example\n* var UINT16_MAX = require( '@stdlib/constants/uint16/max' );\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT16_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 16-bit unsigned integer.\n*\n* @module @stdlib/constants/uint16/num-bytes\n* @type {integer32}\n*\n* @example\n* var UINT16_NUM_BYTES = require( '@stdlib/constants/uint16/num-bytes' );\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 16-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar UINT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT16_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint16/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../uint16/max' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint16/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../uint16/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants/uint32/max\n* @type {uinteger32}\n*\n* @example\n* var UINT32_MAX = require( '@stdlib/constants/uint32/max' );\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nmodule.exports = UINT32_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 32-bit unsigned integer.\n*\n* @module @stdlib/constants/uint32/num-bytes\n* @type {integer32}\n*\n* @example\n* var UINT32_NUM_BYTES = require( '@stdlib/constants/uint32/num-bytes' );\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 32-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar UINT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UINT32_NUM_BYTES;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint32/max}\n*/\nsetReadOnly( constants, 'MAX', require( './../../uint32/max' ) );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint32/num-bytes}\n*/\nsetReadOnly( constants, 'NUM_BYTES', require( './../../uint32/num-bytes' ) );\n\n\n// EXPORTS //\n\nmodule.exports = constants;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum Unicode code point.\n*\n* @module @stdlib/constants/unicode/max\n* @type {integer32}\n*\n* @example\n* var UNICODE_MAX = require( '@stdlib/constants/unicode/max' );\n* // returns 1114111\n*/\n\n\n// MAIN //\n\n/**\n* Maximum Unicode code point.\n*\n* @constant\n* @type {integer32}\n* @default 1114111\n* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}\n*/\nvar UNICODE_MAX = 0x10FFFF|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UNICODE_MAX;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n*\n* @module @stdlib/constants/unicode/max-bmp\n* @type {integer32}\n*\n* @example\n* var UNICODE_MAX_BMP = require( '@stdlib/constants/unicode/max-bmp' );\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n*\n* @constant\n* @type {integer32}\n* @default 65535\n* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}\n*/\nvar UNICODE_MAX_BMP = 0xFFFF|0; // asm type annotation\n\n\n// EXPORTS //\n\nmodule.exports = UNICODE_MAX_BMP;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name MAX\n* @memberof ns\n* @readonly\n* @type {number}\n* @see {@link module:@stdlib/constants/unicode/max}\n*/\nsetReadOnly( ns, 'MAX', require( './../../unicode/max' ) );\n\n/**\n* @name MAX_BMP\n* @memberof ns\n* @readonly\n* @type {number}\n* @see {@link module:@stdlib/constants/unicode/max-bmp}\n*/\nsetReadOnly( ns, 'MAX_BMP', require( './../../unicode/max-bmp' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name array\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/array}\n*/\nsetReadOnly( ns, 'array', require( './../array' ) );\n\n/**\n* @name complex64\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/complex64}\n*/\nsetReadOnly( ns, 'complex64', require( './../complex64' ) );\n\n/**\n* @name complex128\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/complex128}\n*/\nsetReadOnly( ns, 'complex128', require( './../complex128' ) );\n\n/**\n* @name float16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float16}\n*/\nsetReadOnly( ns, 'float16', require( './../float16' ) );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float32}\n*/\nsetReadOnly( ns, 'float32', require( './../float32' ) );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float64}\n*/\nsetReadOnly( ns, 'float64', require( './../float64' ) );\n\n/**\n* @name int8\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int8}\n*/\nsetReadOnly( ns, 'int8', require( './../int8' ) );\n\n/**\n* @name int16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int16}\n*/\nsetReadOnly( ns, 'int16', require( './../int16' ) );\n\n/**\n* @name int32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int32}\n*/\nsetReadOnly( ns, 'int32', require( './../int32' ) );\n\n/**\n* @name path\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/path}\n*/\nsetReadOnly( ns, 'path', require( './../path' ) );\n\n/**\n* @name time\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nsetReadOnly( ns, 'time', require( './../time' ) );\n\n/**\n* @name uint8\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint8}\n*/\nsetReadOnly( ns, 'uint8', require( './../uint8' ) );\n\n/**\n* @name uint16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint16}\n*/\nsetReadOnly( ns, 'uint16', require( './../uint16' ) );\n\n/**\n* @name uint32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint32}\n*/\nsetReadOnly( ns, 'uint32', require( './../uint32' ) );\n\n/**\n* @name unicode\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/unicode}\n*/\nsetReadOnly( ns, 'unicode', require( './../unicode' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "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",
  "names": ["require_lib", "__commonJSMin", "exports", "module", "MAX_ARRAY_LENGTH", "require_lib", "__commonJSMin", "exports", "module", "MAX_TYPED_ARRAY_LENGTH", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "Complex64", "COMPLEX64_NAN", "require_lib", "__commonJSMin", "exports", "module", "COMPLEX64_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "Complex64", "COMPLEX64_ZERO", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "Complex128", "COMPLEX128_NAN", "require_lib", "__commonJSMin", "exports", "module", "COMPLEX128_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "Complex128", "COMPLEX128_ZERO", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_CBRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_EXPONENT_BIAS", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_MAX", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_MAX_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_MIN_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "Number", "FLOAT16_NINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "Number", "FLOAT16_PINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_PRECISION", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_SMALLEST_NORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_SMALLEST_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT16_SQRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_ABS_MASK", "require_lib", "__commonJSMin", "exports", "module", "float64ToFloat32", "FLOAT32_CBRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "float64ToFloat32", "FLOAT32_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_EXPONENT_BIAS", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_EXPONENT_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_MAX", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_MAX_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_MIN_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "Float32Array", "Uint32Array", "FLOAT32_VIEW", "UINT32_VIEW", "v", "FLOAT32_NINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "Float32Array", "Uint32Array", "FLOAT32_VIEW", "UINT32_VIEW", "v", "FLOAT32_PINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_PRECISION", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_SIGN_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_SIGNIFICAND_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_SMALLEST_NORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT32_SMALLEST_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "float64ToFloat32", "FLOAT32_SQRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "APERY", "require_lib", "__commonJSMin", "exports", "module", "CATALAN", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_CBRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "E", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "GAMMA", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_EXPONENT_BIAS", "require_lib", "__commonJSMin", "exports", "module", "FOURTH_PI", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_FOURTH_ROOT_EPS", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_GAMMA_LANCZOS_G", "require_lib", "__commonJSMin", "exports", "module", "A", "require_lib", "__commonJSMin", "exports", "module", "HALF_LN2", "require_lib", "__commonJSMin", "exports", "module", "HALF_PI", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_HIGH_WORD_ABS_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_HIGH_WORD_EXPONENT_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_HIGH_WORD_SIGN_MASK", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_HIGH_WORD_SIGNIFICAND_MASK", "require_lib", "__commonJSMin", "exports", "module", "LN_HALF", "require_lib", "__commonJSMin", "exports", "module", "LN_PI", "require_lib", "__commonJSMin", "exports", "module", "LN_SQRT_TWO_PI", "require_lib", "__commonJSMin", "exports", "module", "LN10", "require_lib", "__commonJSMin", "exports", "module", "LN2", "require_lib", "__commonJSMin", "exports", "module", "LN_TWO_PI", "require_lib", "__commonJSMin", "exports", "module", "LOG2E", "require_lib", "__commonJSMin", "exports", "module", "LOG10E", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_BASE2_EXPONENT", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_BASE10_EXPONENT", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_LN", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_SAFE_FIBONACCI", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_SAFE_LUCAS", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_SAFE_NTH_FIBONACCI", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MAX_SAFE_NTH_LUCAS", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_BASE2_EXPONENT", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_BASE10_EXPONENT", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_LN", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_MIN_SAFE_INTEGER", "require_lib", "__commonJSMin", "exports", "module", "Number", "FLOAT64_NINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "PHI", "require_lib", "__commonJSMin", "exports", "module", "PI", "require_lib", "__commonJSMin", "exports", "module", "PI_SQUARED", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_PINF", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_PRECISION", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_SMALLEST_NORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_SMALLEST_SUBNORMAL", "require_lib", "__commonJSMin", "exports", "module", "FLOAT64_SQRT_EPSILON", "require_lib", "__commonJSMin", "exports", "module", "SQRT_HALF", "require_lib", "__commonJSMin", "exports", "module", "SQRT_HALF_PI", "require_lib", "__commonJSMin", "exports", "module", "SQRT_PHI", "require_lib", "__commonJSMin", "exports", "module", "SQRT_PI", "require_lib", "__commonJSMin", "exports", "module", "SQRT3", "require_lib", "__commonJSMin", "exports", "module", "SQRT2", "require_lib", "__commonJSMin", "exports", "module", "SQRT_TWO_PI", "require_lib", "__commonJSMin", "exports", "module", "TWO_PI", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "INT8_MAX", "require_lib", "__commonJSMin", "exports", "module", "INT8_MIN", "require_lib", "__commonJSMin", "exports", "module", "INT8_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "INT16_MAX", "require_lib", "__commonJSMin", "exports", "module", "INT16_MIN", "require_lib", "__commonJSMin", "exports", "module", "INT16_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "INT32_MAX", "require_lib", "__commonJSMin", "exports", "module", "INT32_MIN", "require_lib", "__commonJSMin", "exports", "module", "INT32_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "PATH_DELIMITER_WIN32", "require_lib", "__commonJSMin", "exports", "module", "PATH_DELIMITER_POSIX", "require_lib", "__commonJSMin", "exports", "module", "IS_WINDOWS", "PATH_DELIMITER_WIN32", "PATH_DELIMITER_POSIX", "PATH_DELIMITER", "require_lib", "__commonJSMin", "exports", "module", "PATH_SEP_WIN32", "require_lib", "__commonJSMin", "exports", "module", "PATH_SEP_POSIX", "require_lib", "__commonJSMin", "exports", "module", "IS_WINDOWS", "PATH_SEP_WIN32", "PATH_SEP_POSIX", "PATH_SEP", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "HOURS_IN_DAY", "require_lib", "__commonJSMin", "exports", "module", "HOURS_IN_WEEK", "require_lib", "__commonJSMin", "exports", "module", "MILLISECONDS_IN_DAY", "require_lib", "__commonJSMin", "exports", "module", "MILLISECONDS_IN_HOUR", "require_lib", "__commonJSMin", "exports", "module", "MILLISECONDS_IN_MINUTE", "require_lib", "__commonJSMin", "exports", "module", "MILLISECONDS_IN_SECOND", "require_lib", "__commonJSMin", "exports", "module", "MILLISECONDS_IN_WEEK", "require_lib", "__commonJSMin", "exports", "module", "MINUTES_IN_DAY", "require_lib", "__commonJSMin", "exports", "module", "MINUTES_IN_HOUR", "require_lib", "__commonJSMin", "exports", "module", "MINUTES_IN_WEEK", "require_lib", "__commonJSMin", "exports", "module", "MONTHS_IN_YEAR", "require_lib", "__commonJSMin", "exports", "module", "SECONDS_IN_DAY", "require_lib", "__commonJSMin", "exports", "module", "SECONDS_IN_HOUR", "require_lib", "__commonJSMin", "exports", "module", "SECONDS_IN_MINUTE", "require_lib", "__commonJSMin", "exports", "module", "SECONDS_IN_WEEK", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "require_lib", "__commonJSMin", "exports", "module", "UINT8_MAX", "require_lib", "__commonJSMin", "exports", "module", "UINT8_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "UINT16_MAX", "require_lib", "__commonJSMin", "exports", "module", "UINT16_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "UINT32_MAX", "require_lib", "__commonJSMin", "exports", "module", "UINT32_NUM_BYTES", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "constants", "require_lib", "__commonJSMin", "exports", "module", "UNICODE_MAX", "require_lib", "__commonJSMin", "exports", "module", "UNICODE_MAX_BMP", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "ns", "setReadOnly", "ns"]
}
