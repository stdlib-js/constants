{"version":3,"file":"index.mjs","sources":["../array/max-array-length/lib/index.js","../array/lib/index.js","../array/max-typed-array-length/lib/index.js","../complex64/nan/lib/index.js","../complex64/zero/lib/index.js","../complex64/lib/index.js","../complex64/num-bytes/lib/index.js","../complex128/nan/lib/index.js","../complex128/zero/lib/index.js","../complex128/lib/index.js","../complex128/num-bytes/lib/index.js","../float16/cbrt-eps/lib/index.js","../float16/ninf/lib/index.js","../float16/pinf/lib/index.js","../float16/lib/index.js","../float16/eps/lib/index.js","../float16/exponent-bias/lib/index.js","../float16/max/lib/index.js","../float16/max-safe-integer/lib/index.js","../float16/min-safe-integer/lib/index.js","../float16/num-bytes/lib/index.js","../float16/precision/lib/index.js","../float16/smallest-normal/lib/index.js","../float16/smallest-subnormal/lib/index.js","../float16/sqrt-eps/lib/index.js","../float32/abs-mask/lib/index.js","../float32/cbrt-eps/lib/index.js","../float32/e/lib/index.js","../float32/eps/lib/index.js","../float32/fourth-pi/lib/index.js","../float32/half-pi/lib/index.js","../float32/ln-half/lib/index.js","../float32/ln-ten/lib/index.js","../float32/ninf/lib/index.js","../float32/phi/lib/index.js","../float32/pi/lib/index.js","../float32/pinf/lib/index.js","../float32/sqrt-eps/lib/index.js","../float32/sqrt-pi/lib/index.js","../float32/sqrt-two/lib/index.js","../float32/sqrt-two-pi/lib/index.js","../float32/two-pi/lib/index.js","../float32/lib/index.js","../float32/exponent-bias/lib/index.js","../float32/exponent-mask/lib/index.js","../float32/half-ln-two/lib/index.js","../float32/ln-pi/lib/index.js","../float32/ln-two/lib/index.js","../float32/max/lib/index.js","../float32/max-base2-exponent/lib/index.js","../float32/max-base2-exponent-subnormal/lib/index.js","../float32/max-base10-exponent/lib/index.js","../float32/max-base10-exponent-subnormal/lib/index.js","../float32/max-safe-fibonacci/lib/index.js","../float32/max-safe-integer/lib/index.js","../float32/max-safe-nth-factorial/lib/index.js","../float32/max-safe-nth-fibonacci/lib/index.js","../float32/max-safe-nth-lucas/lib/index.js","../float32/min-base2-exponent/lib/index.js","../float32/min-base2-exponent-subnormal/lib/index.js","../float32/min-base10-exponent/lib/index.js","../float32/min-base10-exponent-subnormal/lib/index.js","../float32/min-safe-integer/lib/index.js","../float32/nan/lib/index.js","../float32/num-bytes/lib/index.js","../float32/precision/lib/index.js","../float32/sign-mask/lib/index.js","../float32/significand-mask/lib/index.js","../float32/smallest-normal/lib/index.js","../float32/smallest-subnormal/lib/index.js","../float32/sqrt-half/lib/index.js","../float32/sqrt-half-pi/lib/index.js","../float32/sqrt-phi/lib/index.js","../float32/sqrt-three/lib/index.js","../float64/apery/lib/index.js","../float64/ninf/lib/index.js","../float64/pinf/lib/index.js","../float64/lib/index.js","../float64/catalan/lib/index.js","../float64/cbrt-eps/lib/index.js","../float64/e/lib/index.js","../float64/eps/lib/index.js","../float64/eulergamma/lib/index.js","../float64/exponent-bias/lib/index.js","../float64/fourth-pi/lib/index.js","../float64/fourth-root-eps/lib/index.js","../float64/gamma-lanczos-g/lib/index.js","../float64/glaisher-kinkelin/lib/index.js","../float64/half-ln-two/lib/index.js","../float64/half-pi/lib/index.js","../float64/high-word-abs-mask/lib/index.js","../float64/high-word-exponent-mask/lib/index.js","../float64/high-word-sign-mask/lib/index.js","../float64/high-word-significand-mask/lib/index.js","../float64/ln-half/lib/index.js","../float64/ln-pi/lib/index.js","../float64/ln-sqrt-two-pi/lib/index.js","../float64/ln-ten/lib/index.js","../float64/ln-two/lib/index.js","../float64/ln-two-pi/lib/index.js","../float64/log2-e/lib/index.js","../float64/log10-e/lib/index.js","../float64/max/lib/index.js","../float64/max-base2-exponent/lib/index.js","../float64/max-base2-exponent-subnormal/lib/index.js","../float64/max-base10-exponent/lib/index.js","../float64/max-base10-exponent-subnormal/lib/index.js","../float64/max-ln/lib/index.js","../float64/max-safe-fibonacci/lib/index.js","../float64/max-safe-integer/lib/index.js","../float64/max-safe-lucas/lib/index.js","../float64/max-safe-nth-fibonacci/lib/index.js","../float64/max-safe-nth-lucas/lib/index.js","../float64/min-base2-exponent/lib/index.js","../float64/min-base2-exponent-subnormal/lib/index.js","../float64/min-base10-exponent/lib/index.js","../float64/min-base10-exponent-subnormal/lib/index.js","../float64/min-ln/lib/index.js","../float64/min-safe-integer/lib/index.js","../float64/nan/lib/index.js","../float64/num-bytes/lib/index.js","../float64/phi/lib/index.js","../float64/pi/lib/index.js","../float64/pi-squared/lib/index.js","../float64/precision/lib/index.js","../float64/smallest-normal/lib/index.js","../float64/smallest-subnormal/lib/index.js","../float64/sqrt-eps/lib/index.js","../float64/sqrt-half/lib/index.js","../float64/sqrt-half-pi/lib/index.js","../float64/sqrt-phi/lib/index.js","../float64/sqrt-pi/lib/index.js","../float64/sqrt-three/lib/index.js","../float64/sqrt-two/lib/index.js","../float64/sqrt-two-pi/lib/index.js","../float64/two-pi/lib/index.js","../int8/max/lib/index.js","../int8/lib/index.js","../int8/min/lib/index.js","../int8/num-bytes/lib/index.js","../int16/max/lib/index.js","../int16/lib/index.js","../int16/min/lib/index.js","../int16/num-bytes/lib/index.js","../int32/max/lib/index.js","../int32/lib/index.js","../int32/min/lib/index.js","../int32/num-bytes/lib/index.js","../path/delimiter-win32/lib/index.js","../path/sep/lib/index.js","../path/sep-win32/lib/index.js","../path/sep-posix/lib/index.js","../path/lib/index.js","../path/delimiter/lib/index.js","../path/delimiter-posix/lib/index.js","../time/hours-in-day/lib/index.js","../time/lib/index.js","../time/hours-in-week/lib/index.js","../time/milliseconds-in-day/lib/index.js","../time/milliseconds-in-hour/lib/index.js","../time/milliseconds-in-minute/lib/index.js","../time/milliseconds-in-second/lib/index.js","../time/milliseconds-in-week/lib/index.js","../time/minutes-in-day/lib/index.js","../time/minutes-in-hour/lib/index.js","../time/minutes-in-week/lib/index.js","../time/months-in-year/lib/index.js","../time/seconds-in-day/lib/index.js","../time/seconds-in-hour/lib/index.js","../time/seconds-in-minute/lib/index.js","../time/seconds-in-week/lib/index.js","../uint8/max/lib/index.js","../uint8/lib/index.js","../uint8/num-bytes/lib/index.js","../uint16/max/lib/index.js","../uint16/lib/index.js","../uint16/num-bytes/lib/index.js","../uint32/max/lib/index.js","../uint32/lib/index.js","../uint32/num-bytes/lib/index.js","../unicode/max/lib/index.js","../unicode/lib/index.js","../unicode/max-bmp/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a generic array.\n*\n* @module @stdlib/constants/array/max-array-length\n*\n* @example\n* import MAX_ARRAY_LENGTH from '@stdlib/constants/array/max-array-length';\n* // returns 4294967295\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a generic array.\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar MAX_ARRAY_LENGTH = 4294967295>>>0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MAX_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name MAX_ARRAY_LENGTH\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/array/max-array-length}\n*/\nimport MAX_ARRAY_LENGTH from './../../array/max-array-length';\nsetReadOnly( ns, 'MAX_ARRAY_LENGTH', MAX_ARRAY_LENGTH );\n\n/**\n* @name MAX_TYPED_ARRAY_LENGTH\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/array/max-typed-array-length}\n*/\nimport MAX_TYPED_ARRAY_LENGTH from './../../array/max-typed-array-length';\nsetReadOnly( ns, 'MAX_TYPED_ARRAY_LENGTH', MAX_TYPED_ARRAY_LENGTH );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum length of a typed array.\n*\n* @module @stdlib/constants/array/max-typed-array-length\n*\n* @example\n* import MAX_TYPED_ARRAY_LENGTH from '@stdlib/constants/array/max-typed-array-length';\n* // returns 9007199254740991\n*/\n\n// MAIN //\n\n/**\n* Maximum length of a typed array.\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n*/\nvar MAX_TYPED_ARRAY_LENGTH = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default MAX_TYPED_ARRAY_LENGTH;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Canonical single-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex64/nan\n* @type {Complex64}\n*\n* @example\n* import COMPLEX64_NAN from '@stdlib/constants/complex64/nan';\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex/float32/ctor';\n\n\n// MAIN //\n\n/**\n* Canonical single-precision complex floating-point NaN.\n*\n* @constant\n* @type {Complex64}\n*/\nvar COMPLEX64_NAN = new Complex64( NaN, NaN );\n\n\n// EXPORTS //\n\nexport default COMPLEX64_NAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex64/zero\n* @type {Complex64}\n*\n* @example\n* import COMPLEX64_ZERO from '@stdlib/constants/complex64/zero';\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex/float32/ctor';\n\n\n// MAIN //\n\n/**\n* Single-precision complex floating-point zero.\n*\n* @constant\n* @type {Complex64}\n*/\nvar COMPLEX64_ZERO = new Complex64( 0.0, 0.0 );\n\n\n// EXPORTS //\n\nexport default COMPLEX64_ZERO;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name NAN\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex64}\n* @see {@link module:@stdlib/constants/complex64/nan}\n*/\nimport NAN from './../../complex64/nan';\nsetReadOnly( ns, 'NAN', NAN );\n\n/**\n* @name NUM_BYTES\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/complex64/num-bytes}\n*/\nimport NUM_BYTES from './../../complex64/num-bytes';\nsetReadOnly( ns, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name ZERO\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex64}\n* @see {@link module:@stdlib/constants/complex64/zero}\n*/\nimport ZERO from './../../complex64/zero';\nsetReadOnly( ns, 'ZERO', ZERO );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @module @stdlib/constants/complex64/num-bytes\n* @type {integer32}\n*\n* @example\n* import COMPLEX64_NUM_BYTES from '@stdlib/constants/complex64/num-bytes';\n* // returns 8\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 64-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 8\n*/\nvar COMPLEX64_NUM_BYTES = 8|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default COMPLEX64_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Canonical double-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex128/nan\n* @type {Complex128}\n*\n* @example\n* import COMPLEX128_NAN from '@stdlib/constants/complex128/nan';\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex/float64/ctor';\n\n\n// MAIN //\n\n/**\n* Canonical double-precision complex floating-point NaN.\n*\n* @constant\n* @type {Complex128}\n*/\nvar COMPLEX128_NAN = new Complex128( NaN, NaN );\n\n\n// EXPORTS //\n\nexport default COMPLEX128_NAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision complex floating-point zero.\n*\n* @module @stdlib/constants/complex128/zero\n* @type {Complex128}\n*\n* @example\n* import COMPLEX128_ZERO from '@stdlib/constants/complex128/zero';\n* // returns <Complex128>\n*/\n\n// MODULES //\n\nimport Complex128 from '@stdlib/complex/float64/ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision complex floating-point zero.\n*\n* @constant\n* @type {Complex128}\n*/\nvar COMPLEX128_ZERO = new Complex128( 0.0, 0.0 );\n\n\n// EXPORTS //\n\nexport default COMPLEX128_ZERO;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name NAN\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex128}\n* @see {@link module:@stdlib/constants/complex128/nan}\n*/\nimport NAN from './../../complex128/nan';\nsetReadOnly( ns, 'NAN', NAN );\n\n/**\n* @name NUM_BYTES\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/complex128/num-bytes}\n*/\nimport NUM_BYTES from './../../complex128/num-bytes';\nsetReadOnly( ns, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name ZERO\n* @memberof ns\n* @readonly\n* @constant\n* @type {Complex128}\n* @see {@link module:@stdlib/constants/complex128/zero}\n*/\nimport ZERO from './../../complex128/zero';\nsetReadOnly( ns, 'ZERO', ZERO );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @module @stdlib/constants/complex128/num-bytes\n* @type {integer32}\n*\n* @example\n* import COMPLEX128_NUM_BYTES from '@stdlib/constants/complex128/num-bytes';\n* // returns 16\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 128-bit complex number.\n*\n* @constant\n* @type {integer32}\n* @default 16\n*/\nvar COMPLEX128_NUM_BYTES = 16|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default COMPLEX128_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of half-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float16/cbrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT16_CBRT_EPSILON from '@stdlib/constants/float16/cbrt-eps';\n* // returns 0.09921256574801247\n*/\n\n\n// MAIN //\n\n/**\n* Cube root of half-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{10}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.09921256574801247\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_CBRT_EPSILON = 0.09921256574801247;\n\n\n// EXPORTS //\n\nexport default FLOAT16_CBRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Half-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float16/ninf\n* @type {number}\n*\n* @example\n* import FLOAT16_NINF from '@stdlib/constants/float16/ninf';\n* // returns -infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number/ctor';\n\n\n// MAIN //\n\n/**\n* Half-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Half-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111 0000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 16-bit integer `64512` and to the HEX value `0xfc00`.\n*\n* @constant\n* @type {number}\n* @default -infinity\n* @see [half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_NINF = Number.NEGATIVE_INFINITY; // TODO: if, and when, float16 is natively available, assign the true constant; otherwise, fall back to float64\n\n\n// EXPORTS //\n\nexport default FLOAT16_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Half-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float16/pinf\n* @type {number}\n*\n* @example\n* import FLOAT16_PINF from '@stdlib/constants/float16/pinf';\n* // returns +infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number/ctor';\n\n\n// MAIN //\n\n/**\n* Half-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Half-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111 0000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 16-bit integer `31744` and to the HEX value `0x7c00`.\n*\n* @constant\n* @type {number}\n* @default infinity\n* @see [half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_PINF = Number.POSITIVE_INFINITY; // TODO: if, and when, float16 is natively available, assign the true constant; otherwise, fall back to float64\n\n\n// EXPORTS //\n\nexport default FLOAT16_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/cbrt-eps}\n*/\nimport CBRT_EPS from './../../float16/cbrt-eps';\nsetReadOnly( constants, 'CBRT_EPS', CBRT_EPS );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/eps}\n*/\nimport EPS from './../../float16/eps';\nsetReadOnly( constants, 'EPS', EPS );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/exponent-bias}\n*/\nimport EXPONENT_BIAS from './../../float16/exponent-bias';\nsetReadOnly( constants, 'EXPONENT_BIAS', EXPONENT_BIAS );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max}\n*/\nimport MAX from './../../float16/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/max-safe-integer}\n*/\nimport MAX_SAFE_INTEGER from './../../float16/max-safe-integer';\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/min-safe-integer}\n*/\nimport MIN_SAFE_INTEGER from './../../float16/min-safe-integer';\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/ninf}\n*/\nimport NINF from './../../float16/ninf';\nsetReadOnly( constants, 'NINF', NINF );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/num-bytes}\n*/\nimport NUM_BYTES from './../../float16/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/pinf}\n*/\nimport PINF from './../../float16/pinf';\nsetReadOnly( constants, 'PINF', PINF );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/precision}\n*/\nimport PRECISION from './../../float16/precision';\nsetReadOnly( constants, 'PRECISION', PRECISION );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-normal}\n*/\nimport SMALLEST_NORMAL from './../../float16/smallest-normal';\nsetReadOnly( constants, 'SMALLEST_NORMAL', SMALLEST_NORMAL );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/smallest-subnormal}\n*/\nimport SMALLEST_SUBNORMAL from './../../float16/smallest-subnormal';\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', SMALLEST_SUBNORMAL );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float16/sqrt-eps}\n*/\nimport SQRT_EPS from './../../float16/sqrt-eps';\nsetReadOnly( constants, 'SQRT_EPS', SQRT_EPS );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/eps\n* @type {number}\n*\n* @example\n* import FLOAT16_EPSILON from '@stdlib/constants/float16/eps';\n* // returns 0.0009765625\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a half-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is equal to\n*\n* ```tex\n* \\frac{1}{2^{10}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0009765625\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_EPSILON = 0.0009765625; // In JavaScript, can only represent as a double-precision floating-point number (float64)\n\n\n// EXPORTS //\n\nexport default FLOAT16_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a half-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float16/exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT16_EXPONENT_BIAS from '@stdlib/constants/float16/exponent-bias';\n* // returns 15\n*/\n\n\n// MAIN //\n\n/**\n* The bias of a half-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 5\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 15\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_EXPONENT_BIAS = 15|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT16_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/max\n* @type {number}\n*\n* @example\n* import FLOAT16_MAX from '@stdlib/constants/float16/max';\n* // returns 65504.0\n*/\n\n\n// MAIN //\n\n/**\n* The maximum half-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{15} (2 - 2^{-10})\n* ```\n*\n* @constant\n* @type {number}\n* @default 65504.0\n* @see [half-precision floating-point form]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MAX = 65504.0;\n\n\n// EXPORTS //\n\nexport default FLOAT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe half-precision floating-point integer.\n*\n* @module @stdlib/constants/float16/max-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT16_MAX_SAFE_INTEGER from '@stdlib/constants/float16/max-safe-integer';\n* // returns 2047\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe half-precision floating-point integer.\n*\n* ## Notes\n*\n* The maximum is equal to\n*\n* ```tex\n* 2^{11} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 2047\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MAX_SAFE_INTEGER = 2047;\n\n\n// EXPORTS //\n\nexport default FLOAT16_MAX_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe half-precision floating-point integer.\n*\n* @module @stdlib/constants/float16/min-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT16_MIN_SAFE_INTEGER from '@stdlib/constants/float16/min-safe-integer';\n* // returns -2047\n*/\n\n\n// MAIN //\n\n/**\n* The minimum safe half-precision floating-point integer.\n*\n* ## Notes\n*\n* The minimum is equal to\n*\n* ```tex\n* -(2^{11} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -2047\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_MIN_SAFE_INTEGER = -2047;\n\n\n// EXPORTS //\n\nexport default FLOAT16_MIN_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/num-bytes\n* @type {integer32}\n*\n* @example\n* import FLOAT16_NUM_BYTES from '@stdlib/constants/float16/num-bytes';\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a half-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar FLOAT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT16_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a half-precision floating-point number.\n*\n* @module @stdlib/constants/float16/precision\n* @type {integer32}\n*\n* @example\n* import FLOAT16_PRECISION from '@stdlib/constants/float16/precision';\n* // returns 11\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a half-precision floating-point number is `10` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 11\n*/\nvar FLOAT16_PRECISION = 11|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT16_PRECISION;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive half-precision floating-point normal number.\n*\n* @module @stdlib/constants/float16/smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT16_SMALLEST_NORMAL from '@stdlib/constants/float16/smallest-normal';\n* // returns 6.103515625e-5\n*/\n\n\n// MAIN //\n\n/**\n* Smallest positive half-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{15-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00001 0000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 6.103515625e-5\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_SMALLEST_NORMAL = 6.103515625e-5;\n\n\n// EXPORTS //\n\nexport default FLOAT16_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive half-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float16/smallest-subnormal\n* @type {number}\n*\n* @example\n* import FLOAT16_SMALLEST_SUBNORMAL from '@stdlib/constants/float16/smallest-subnormal';\n* // returns 5.960464477539063e-8\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive half-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{15-1} 2^{10}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000 0000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 5.960464477539063e-8\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n*/\nvar FLOAT16_SMALLEST_SUBNORMAL = 5.960464477539063e-8;\n\n\n// EXPORTS //\n\nexport default FLOAT16_SMALLEST_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of half-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float16/sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT16_SQRT_EPSILON from '@stdlib/constants/float16/sqrt-eps';\n* // returns 0.03125\n*/\n\n\n// MAIN //\n\n/**\n* Square root of half-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{10}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.03125\n* @see [Half-precision floating-point format]{@link https://en.wikipedia.org/wiki/Half-precision_floating-point_format}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT16_SQRT_EPSILON = 0.03125;\n\n\n// EXPORTS //\n\nexport default FLOAT16_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_ABS_MASK from '@stdlib/constants/float32/abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Mask for excluding the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111 11111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_ABS_MASK = 0x7fffffff>>>0;\n\n\n// EXPORTS //\n\nexport default FLOAT32_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of single-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float32/cbrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT32_CBRT_EPSILON from '@stdlib/constants/float32/cbrt-eps';\n* // returns 0.004921566694974899\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Cube root of single-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{23}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.004921566694974899\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_CBRT_EPSILON = float64ToFloat32( 0.004921566601151848 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_CBRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants/float32/e\n* @type {number}\n*\n* @example\n* import E from '@stdlib/constants/float32/e';\n* // returns 2.7182817459106445\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.7182817459106445\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = float64ToFloat32( 2.718281828459045 );\n\n\n// EXPORTS //\n\nexport default E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/eps\n* @type {number}\n*\n* @example\n* import FLOAT32_EPSILON from '@stdlib/constants/float32/eps';\n* // returns 1.1920928955078125e-7\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a single-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is equal to\n*\n* ```tex\n* \\frac{1}{2^{23}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1920928955078125e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_EPSILON = float64ToFloat32( 1.1920928955078125e-7 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @module @stdlib/constants/float32/fourth-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_FOURTH_PI from '@stdlib/constants/float32/fourth-pi';\n* // returns 7.853981852531433e-1\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 7.853981852531433e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_FOURTH_PI = float64ToFloat32( 7.85398163397448309616e-1 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_FOURTH_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @module @stdlib/constants/float32/half-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_HALF_PI from '@stdlib/constants/float32/half-pi';\n* // returns 1.5707963705062866\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963705062866\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_HALF_PI = float64ToFloat32( 1.5707963267948966 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `1/2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/ln-half\n* @type {number}\n*\n* @example\n* import LN_HALF from '@stdlib/constants/float32/ln-half';\n* // returns -0.6931471824645996\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `1/2` as a single-precision floating-point number.\n*\n* ```tex\n* \\ln (1/2)\n* ```\n*\n* @constant\n* @type {number}\n* @default -0.6931471824645996\n*/\nvar FLOAT32_LN_HALF = float64ToFloat32(-0.69314718055994530941723212145817656807550013436025525412); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_LN_HALF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `10` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/ln-ten\n* @type {number}\n*\n* @example\n* import LN10 from '@stdlib/constants/float32/ln-ten';\n* // returns  2.3025851249694824\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `10` as a single-precision floating-point number.\n*\n* ```tex\n* \\ln 10\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.3025851249694824\n*/\nvar FLOAT32_LN10 = float64ToFloat32( 2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00 ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_LN10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float32/ninf\n* @type {number}\n*\n* @example\n* import FLOAT32_NINF from '@stdlib/constants/float32/ninf';\n* // returns -infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport Uint32Array from '@stdlib/array/uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `4286578688` and to the HEX value `0xff800000`.\n*\n* @constant\n* @type {number}\n* @default 0xff800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NINF = 0xff800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_NINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Golden ratio.\n*\n* @module @stdlib/constants/float32/phi\n* @type {number}\n*\n* @example\n* import FLOAT32_PHI from '@stdlib/constants/float32/phi';\n* // returns 1.6180340051651\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.6180340051651\n* @see [OEIS]{@link http://oeis.org/A001622}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar FLOAT32_PHI = float64ToFloat32( 1.61803398874989484820458683436563811772030917980576286213544862 ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_PHI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π`.\n*\n* @module @stdlib/constants/float32/pi\n* @type {number}\n*\n* @example\n* import FLOAT32_PI from '@stdlib/constants/float32/pi';\n* // returns 3.1415927410125732\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 3.1415927410125732\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_PI = float64ToFloat32( 3.141592653589793 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float32/pinf\n* @type {number}\n*\n* @example\n* import FLOAT32_PINF from '@stdlib/constants/float32/pinf';\n* // returns +infinity\n*/\n\n// MODULES //\n\nimport Float32Array from '@stdlib/array/float32';\nimport Uint32Array from '@stdlib/array/uint32';\n\n\n// VARIABLES //\n\nvar FLOAT32_VIEW = new Float32Array( 1 );\nvar UINT32_VIEW = new Uint32Array( FLOAT32_VIEW.buffer );\nvar v;\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Single-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* This bit sequence corresponds to the unsigned 32-bit integer `2139095040` and to the HEX value `0x7f800000`.\n*\n* @constant\n* @type {number}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PINF = 0x7f800000;\n\n// Set the ArrayBuffer bit sequence:\nUINT32_VIEW[ 0 ] = FLOAT32_PINF;\n\nv = FLOAT32_VIEW[ 0 ];\n\n\n// EXPORTS //\n\nexport default v;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of single-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float32/sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_EPSILON from '@stdlib/constants/float32/sqrt-eps';\n* // returns 0.0003452669770922512\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Square root of single-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{23}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0003452669770922512\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT32_SQRT_EPSILON = float64ToFloat32( 0.0003452669770922512 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_PI from '@stdlib/constants/float32/sqrt-pi';\n* // returns 1.7724539041519165\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` as a single-precision floating-point number.\n*\n* @constant\n* @type {number}\n* @default 1.7724539041519165\n* @see [OEIS]{@link https://oeis.org/A002161}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_SQRT_PI = float64ToFloat32( 1.772453850905516027298167483341145182797549456122387128213 ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-two\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT2 from '@stdlib/constants/float32/sqrt-two';\n* // returns 1.4142135381698608\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Square root of `2` as a single-precision floating-point number.\n*\n* ```tex\n* \\sqrt{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.4142135381698608\n*/\nvar FLOAT32_SQRT2 = float64ToFloat32( 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00 ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` times `2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-two-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_TWO_PI from '@stdlib/constants/float32/sqrt-two-pi';\n* // returns 2.5066282749176025\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` times `2` as a single-precision floating-point number.\n*\n* @constant\n* @type {number}\n* @default 2.5066282749176025\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_SQRT_TWO_PI = float64ToFloat32( 2.506628274631000502415765284811045253e+00 ); // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants/float32/two-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_TWO_PI from '@stdlib/constants/float32/two-pi';\n* // returns 6.2831854820251465\n*/\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number/float64/base/to-float32';\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.2831854820251465\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_TWO_PI = float64ToFloat32( 6.283185307179586 );\n\n\n// EXPORTS //\n\nexport default FLOAT32_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name ABS_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/abs-mask}\n*/\nimport ABS_MASK from './../../float32/abs-mask';\nsetReadOnly( constants, 'ABS_MASK', ABS_MASK );\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/cbrt-eps}\n*/\nimport CBRT_EPS from './../../float32/cbrt-eps';\nsetReadOnly( constants, 'CBRT_EPS', CBRT_EPS );\n\n/**\n* @name E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/e}\n*/\nimport E from './../../float32/e';\nsetReadOnly( constants, 'E', E );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/eps}\n*/\nimport EPS from './../../float32/eps';\nsetReadOnly( constants, 'EPS', EPS );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/exponent-bias}\n*/\nimport EXPONENT_BIAS from './../../float32/exponent-bias';\nsetReadOnly( constants, 'EXPONENT_BIAS', EXPONENT_BIAS );\n\n/**\n* @name EXPONENT_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/exponent-mask}\n*/\nimport EXPONENT_MASK from './../../float32/exponent-mask';\nsetReadOnly( constants, 'EXPONENT_MASK', EXPONENT_MASK );\n\n/**\n* @name FOURTH_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/fourth-pi}\n*/\nimport FOURTH_PI from './../../float32/fourth-pi';\nsetReadOnly( constants, 'FOURTH_PI', FOURTH_PI );\n\n/**\n* @name HALF_LN_TWO\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/half-ln-two}\n*/\nimport HALF_LN_TWO from './../../float32/half-ln-two';\nsetReadOnly( constants, 'HALF_LN_TWO', HALF_LN_TWO );\n\n/**\n* @name HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/half-pi}\n*/\nimport HALF_PI from './../../float32/half-pi';\nsetReadOnly( constants, 'HALF_PI', HALF_PI );\n\n/**\n* @name LN_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ln-half}\n*/\nimport LN_HALF from './../../float32/ln-half';\nsetReadOnly( constants, 'LN_HALF', LN_HALF );\n\n/**\n* @name LN_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ln-pi}\n*/\nimport LN_PI from './../../float32/ln-pi';\nsetReadOnly( constants, 'LN_PI', LN_PI );\n\n/**\n* @name LN_TEN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ln-ten}\n*/\nimport LN_TEN from './../../float32/ln-ten';\nsetReadOnly( constants, 'LN_TEN', LN_TEN );\n\n/**\n* @name LN_TWO\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ln-two}\n*/\nimport LN_TWO from './../../float32/ln-two';\nsetReadOnly( constants, 'LN_TWO', LN_TWO );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max}\n*/\nimport MAX from './../../float32/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MAX_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-base2-exponent}\n*/\nimport MAX_BASE2_EXPONENT from './../../float32/max-base2-exponent';\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT', MAX_BASE2_EXPONENT );\n\n/**\n* @name MAX_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-base2-exponent-subnormal}\n*/\nimport MAX_BASE2_EXPONENT_SUBNORMAL from './../../float32/max-base2-exponent-subnormal';\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT_SUBNORMAL', MAX_BASE2_EXPONENT_SUBNORMAL );\n\n/**\n* @name MAX_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-base10-exponent}\n*/\nimport MAX_BASE10_EXPONENT from './../../float32/max-base10-exponent';\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT', MAX_BASE10_EXPONENT );\n\n/**\n* @name MAX_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-base10-exponent-subnormal}\n*/\nimport MAX_BASE10_EXPONENT_SUBNORMAL from './../../float32/max-base10-exponent-subnormal';\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT_SUBNORMAL', MAX_BASE10_EXPONENT_SUBNORMAL );\n\n/**\n* @name MAX_SAFE_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-fibonacci}\n*/\nimport MAX_SAFE_FIBONACCI from './../../float32/max-safe-fibonacci';\nsetReadOnly( constants, 'MAX_SAFE_FIBONACCI', MAX_SAFE_FIBONACCI );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-integer}\n*/\nimport MAX_SAFE_INTEGER from './../../float32/max-safe-integer';\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER );\n\n/**\n* @name MAX_SAFE_NTH_FACTORIAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-nth-factorial}\n*/\nimport MAX_SAFE_NTH_FACTORIAL from './../../float32/max-safe-nth-factorial';\nsetReadOnly( constants, 'MAX_SAFE_NTH_FACTORIAL', MAX_SAFE_NTH_FACTORIAL );\n\n/**\n* @name MAX_SAFE_NTH_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-nth-fibonacci}\n*/\nimport MAX_SAFE_NTH_FIBONACCI from './../../float32/max-safe-nth-fibonacci';\nsetReadOnly( constants, 'MAX_SAFE_NTH_FIBONACCI', MAX_SAFE_NTH_FIBONACCI );\n\n/**\n* @name MAX_SAFE_NTH_LUCAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-nth-lucas}\n*/\nimport MAX_SAFE_NTH_LUCAS from './../../float32/max-safe-nth-lucas';\nsetReadOnly( constants, 'MAX_SAFE_NTH_LUCAS', MAX_SAFE_NTH_LUCAS );\n\n/**\n* @name MIN_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-base2-exponent}\n*/\nimport MIN_BASE2_EXPONENT from './../../float32/min-base2-exponent';\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT', MIN_BASE2_EXPONENT );\n\n/**\n* @name MIN_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-base2-exponent-subnormal}\n*/\nimport MIN_BASE2_EXPONENT_SUBNORMAL from './../../float32/min-base2-exponent-subnormal';\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT_SUBNORMAL', MIN_BASE2_EXPONENT_SUBNORMAL );\n\n/**\n* @name MIN_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-base10-exponent}\n*/\nimport MIN_BASE10_EXPONENT from './../../float32/min-base10-exponent';\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT', MIN_BASE10_EXPONENT );\n\n/**\n* @name MIN_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-base10-exponent-subnormal}\n*/\nimport MIN_BASE10_EXPONENT_SUBNORMAL from './../../float32/min-base10-exponent-subnormal';\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT_SUBNORMAL', MIN_BASE10_EXPONENT_SUBNORMAL );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-safe-integer}\n*/\nimport MIN_SAFE_INTEGER from './../../float32/min-safe-integer';\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER );\n\n/**\n* @name NAN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/nan}\n*/\nimport NAN from './../../float32/nan';\nsetReadOnly( constants, 'NAN', NAN );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ninf}\n*/\nimport NINF from './../../float32/ninf';\nsetReadOnly( constants, 'NINF', NINF );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/num-bytes}\n*/\nimport NUM_BYTES from './../../float32/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/phi}\n*/\nimport PHI from './../../float32/phi';\nsetReadOnly( constants, 'PHI', PHI );\n\n/**\n* @name PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/pi}\n*/\nimport PI from './../../float32/pi';\nsetReadOnly( constants, 'PI', PI );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/pinf}\n*/\nimport PINF from './../../float32/pinf';\nsetReadOnly( constants, 'PINF', PINF );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/precision}\n*/\nimport PRECISION from './../../float32/precision';\nsetReadOnly( constants, 'PRECISION', PRECISION );\n\n/**\n* @name SIGN_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sign-mask}\n*/\nimport SIGN_MASK from './../../float32/sign-mask';\nsetReadOnly( constants, 'SIGN_MASK', SIGN_MASK );\n\n/**\n* @name SIGNIFICAND_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/significand-mask}\n*/\nimport SIGNIFICAND_MASK from './../../float32/significand-mask';\nsetReadOnly( constants, 'SIGNIFICAND_MASK', SIGNIFICAND_MASK );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-normal}\n*/\nimport SMALLEST_NORMAL from './../../float32/smallest-normal';\nsetReadOnly( constants, 'SMALLEST_NORMAL', SMALLEST_NORMAL );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-subnormal}\n*/\nimport SMALLEST_SUBNORMAL from './../../float32/smallest-subnormal';\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', SMALLEST_SUBNORMAL );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-eps}\n*/\nimport SQRT_EPS from './../../float32/sqrt-eps';\nsetReadOnly( constants, 'SQRT_EPS', SQRT_EPS );\n\n/**\n* @name SQRT_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-half}\n*/\nimport SQRT_HALF from './../../float32/sqrt-half';\nsetReadOnly( constants, 'SQRT_HALF', SQRT_HALF );\n\n/**\n* @name SQRT_HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-half-pi}\n*/\nimport SQRT_HALF_PI from './../../float32/sqrt-half-pi';\nsetReadOnly( constants, 'SQRT_HALF_PI', SQRT_HALF_PI );\n\n/**\n* @name SQRT_PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-phi}\n*/\nimport SQRT_PHI from './../../float32/sqrt-phi';\nsetReadOnly( constants, 'SQRT_PHI', SQRT_PHI );\n\n/**\n* @name SQRT_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-pi}\n*/\nimport SQRT_PI from './../../float32/sqrt-pi';\nsetReadOnly( constants, 'SQRT_PI', SQRT_PI );\n\n/**\n* @name SQRT_THREE\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-three}\n*/\nimport SQRT_THREE from './../../float32/sqrt-three';\nsetReadOnly( constants, 'SQRT_THREE', SQRT_THREE );\n\n/**\n* @name SQRT_TWO\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-two}\n*/\nimport SQRT_TWO from './../../float32/sqrt-two';\nsetReadOnly( constants, 'SQRT_TWO', SQRT_TWO );\n\n/**\n* @name SQRT_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-two-pi}\n*/\nimport SQRT_TWO_PI from './../../float32/sqrt-two-pi';\nsetReadOnly( constants, 'SQRT_TWO_PI', SQRT_TWO_PI );\n\n/**\n* @name TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/two-pi}\n*/\nimport TWO_PI from './../../float32/two-pi';\nsetReadOnly( constants, 'TWO_PI', TWO_PI );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a single-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float32/exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT32_EXPONENT_BIAS from '@stdlib/constants/float32/exponent-bias';\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* The bias of a single-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 8\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 127\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_EXPONENT_BIAS = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the exponent of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_EXPONENT_MASK from '@stdlib/constants/float32/exponent-mask';\n* // returns 2139095040\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the exponent of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the exponent of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2139095040 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111 00000000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7f800000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_EXPONENT_MASK = 0x7f800000;\n\n\n// EXPORTS //\n\nexport default FLOAT32_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2 as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/half-ln-two\n* @type {number}\n*\n* @example\n* import FLOAT32_HALF_LN2 from '@stdlib/constants/float32/half-ln-two';\n* // returns 0.3465735912322998\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2 as a single-precision floating-point number.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.3465735912322998\n*/\nvar FLOAT32_HALF_LN2 = 0.3465735912322998; // 0x3EB17218\n\n\n// EXPORTS //\n\nexport default FLOAT32_HALF_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the mathematical constant `π` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/ln-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_LN_PI from '@stdlib/constants/float32/ln-pi';\n* // returns 1.1447298526763916\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the mathematical constant `π` as a single-precision floating-point number.\n*\n* @constant\n* @type {number}\n* @default 1.1447298526763916\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_LN_PI = 1.1447298526763916;\n\n\n// EXPORTS //\n\nexport default FLOAT32_LN_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/ln-two\n* @type {number}\n*\n* @example\n* import FLOAT32_LN2 from '@stdlib/constants/float32/ln-two';\n* // returns 0.6931471824645996\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2` as a single-precision floating-point number.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471824645996\n*/\nvar FLOAT32_LN2 = 0.6931471824645996;\n\n\n// EXPORTS //\n\nexport default FLOAT32_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max\n* @type {number}\n*\n* @example\n* import FLOAT32_MAX from '@stdlib/constants/float32/max';\n* // returns 3.4028234663852886e+38\n*/\n\n\n// MAIN //\n\n/**\n* Maximum single-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{127} (2 - 2^{-23})\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.4028234663852886e+38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX = 3.4028234663852886e+38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MAX_BASE2_EXPONENT from '@stdlib/constants/float32/max-base2-exponent';\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a single-precision floating-point number.\n*\n* ```text\n* 11111110 => 254 - BIAS = 127\n* ```\n*\n* where `BIAS = 127`.\n*\n* @constant\n* @type {integer32}\n* @default 127\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_BASE2_EXPONENT = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants/float32/max-base2-exponent-subnormal';\n* // returns -127\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal single-precision floating-point number.\n*\n* ```text\n* 00000000 => 0 - BIAS = -127\n* ```\n*\n* where `BIAS = 127`.\n*\n* @constant\n* @type {integer32}\n* @default -127\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_BASE2_EXPONENT_SUBNORMAL = -127|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MAX_BASE10_EXPONENT from '@stdlib/constants/float32/max-base10-exponent';\n* // returns 38\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_BASE10_EXPONENT = 38|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a subnormal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/max-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MAX_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants/float32/max-base10-exponent-subnormal';\n* // returns -38\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a subnormal single-precision floating-point number.\n*\n* ```text\n* 2^-126 ≈ 1.17549435e-38 => -38\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_BASE10_EXPONENT_SUBNORMAL = -38|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe Fibonacci number when stored in single-precision floating-point format.\n*\n* @module @stdlib/constants/float32/max-safe-fibonacci\n* @type {integer}\n*\n* @example\n* import FLOAT32_MAX_SAFE_FIBONACCI from '@stdlib/constants/float32/max-safe-fibonacci';\n* // returns 14930352\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe Fibonacci number when stored in single-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 14930352\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_FIBONACCI = 14930352; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_FIBONACCI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe single-precision floating-point integer.\n*\n* @module @stdlib/constants/float32/max-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT32_MAX_SAFE_INTEGER from '@stdlib/constants/float32/max-safe-integer';\n* // returns 16777215\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe single-precision floating-point integer.\n*\n* ## Notes\n*\n* The maximum safe integer is given by\n*\n* ```tex\n* 2^{24} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 16777215\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_INTEGER = 16777215;\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* Maximum safe nth factorial when stored in single-precision floating-point format.\n*\n* @module @stdlib/constants/float32/max-safe-nth-factorial\n* @type {integer}\n*\n* @example\n* import FLOAT32_MAX_SAFE_NTH_FACTORIAL from '@stdlib/constants/float32/max-safe-nth-factorial';\n* // returns 10\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth factorial when stored in single-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 10\n* @see [factorial]{@link https://en.wikipedia.org/wiki/Factorial}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_NTH_FACTORIAL = 10|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_NTH_FACTORIAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe nth Fibonacci number when stored in single-precision floating-point format.\n*\n* @module @stdlib/constants/float32/max-safe-nth-fibonacci\n* @type {integer}\n*\n* @example\n* import FLOAT32_MAX_SAFE_NTH_FIBONACCI from '@stdlib/constants/float32/max-safe-nth-fibonacci';\n* // returns 36\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Fibonacci number when stored in single-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 36\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_NTH_FIBONACCI = 36|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_NTH_FIBONACCI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* Maximum safe nth Lucas number when stored in single-precision floating-point format.\n*\n* @module @stdlib/constants/float32/max-safe-nth-lucas\n* @type {integer}\n*\n* @example\n* import FLOAT32_MAX_SAFE_NTH_LUCAS from '@stdlib/constants/float32/max-safe-nth-lucas';\n* // returns 34\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Lucas number when stored in single-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 34\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_NTH_LUCAS = 34|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_NTH_LUCAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a normal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/min-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MIN_BASE2_EXPONENT from '@stdlib/constants/float32/min-base2-exponent';\n* // returns -126\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a normal single-precision floating-point number.\n*\n* ```text\n* 1 - BIAS = -126\n* ```\n*\n* where `BIAS = 127`.\n*\n* @constant\n* @type {integer32}\n* @default -126\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_BASE2_EXPONENT = -126|0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT32_MIN_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants/float32/min-base2-exponent-subnormal';\n* // returns -149\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal single-precision floating-point number.\n*\n* ```text\n* -(BIAS+(23-1)) = -(127+22) = -149\n* ```\n*\n* where `BIAS = 127` and `23` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -149\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_BASE2_EXPONENT_SUBNORMAL = -149|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a normal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/min-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MIN_BASE10_EXPONENT from '@stdlib/constants/float32/min-base10-exponent';\n* // returns -37\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a normal single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -37\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_BASE10_EXPONENT = -37|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MIN_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a subnormal single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/min-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT32_MIN_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants/float32/min-base10-exponent-subnormal';\n* // returns -45\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a subnormal single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -45\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_BASE10_EXPONENT_SUBNORMAL = -45|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_MIN_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe single-precision floating-point integer.\n*\n* @module @stdlib/constants/float32/min-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT32_MIN_SAFE_INTEGER from '@stdlib/constants/float32/min-safe-integer';\n* // returns -16777215\n*/\n\n\n// MAIN //\n\n/**\n* Minimum safe single-precision floating-point integer.\n*\n* ## Notes\n*\n* The minimum safe integer is given by\n*\n* ```tex\n* -(2^{24} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -16777215\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MIN_SAFE_INTEGER = -16777215;\n\n\n// EXPORTS //\n\nexport default FLOAT32_MIN_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Single-precision floating-point NaN.\n*\n* @module @stdlib/constants/float32/nan\n* @type {number}\n*\n* @example\n* import FLOAT32_NAN from '@stdlib/constants/float32/nan';\n* // returns NaN\n*/\n\n\n// MAIN //\n\n/**\n* Single-precision floating-point NaN.\n*\n* @constant\n* @type {number}\n* @default NaN\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_NAN = NaN;\n\n\n// EXPORTS //\n\nexport default FLOAT32_NAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/num-bytes\n* @type {integer32}\n*\n* @example\n* import FLOAT32_NUM_BYTES from '@stdlib/constants/float32/num-bytes';\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a single-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar FLOAT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/precision\n* @type {integer32}\n*\n* @example\n* import FLOAT32_PRECISION from '@stdlib/constants/float32/precision';\n* // returns 24\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a single-precision floating-point number is `23` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 24\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_PRECISION = 24|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT32_PRECISION;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_SIGN_MASK from '@stdlib/constants/float32/sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the sign bit of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the sign bit of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000 00000000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SIGN_MASK = 0x80000000>>>0;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Mask for the significand of a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/significand-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT32_SIGNIFICAND_MASK from '@stdlib/constants/float32/significand-mask';\n* // returns 8388607\n*/\n\n\n// MAIN //\n\n/**\n* Mask for the significand of a single-precision floating-point number.\n*\n* ## Notes\n*\n* The mask for the significand of a single-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 8388607 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000 11111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x007fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SIGNIFICAND_MASK = 0x007fffff;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SIGNIFICAND_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point normal number.\n*\n* @module @stdlib/constants/float32/smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT32_SMALLEST_NORMAL from '@stdlib/constants/float32/smallest-normal';\n* // returns 1.1754943508222875e-38\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive single-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000001 00000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.1754943508222875e-38\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive single-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float32/smallest-subnormal\n* @type {number}\n*\n* @example\n* import FLOAT32_SMALLEST_SUBNORMAL from '@stdlib/constants/float32/smallest-subnormal';\n* // returns 1.401298464324817e-45\n*/\n\n\n// MAIN //\n\n/**\n* Smallest positive single-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{127-1} 2^{23}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000 00000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.401298464324817e-45\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_SMALLEST_SUBNORMAL = 1.401298464324817e-45;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SMALLEST_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `1/2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-half\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_HALF from '@stdlib/constants/float32/sqrt-half';\n* // returns 0.7071067690849304\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `1/2` as a single-precision floating-point number.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.7071067690849304\n*/\nvar FLOAT32_SQRT_HALF = 0.7071067690849304;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_HALF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` divided by `2` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-half-pi\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_HALF_PI from '@stdlib/constants/float32/sqrt-half-pi';\n* // returns 1.2533141374588013\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` divided by `2` as a single-precision floating-point number.\n*\n* @constant\n* @type {number}\n* @default 1.2533141374588013\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FLOAT32_SQRT_HALF_PI = 1.2533141374588013;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the golden ratio as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-phi\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT_PHI from '@stdlib/constants/float32/sqrt-phi';\n* // returns 1.272019624710083\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the golden ratio as a single-precision floating-point number.\n*\n* @constant\n* @type {number}\n* @default 1.272019624710083\n* @see [OEIS]{@link http://oeis.org/A139339}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar FLOAT32_SQRT_PHI = 1.272019624710083;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT_PHI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `3` as a single-precision floating-point number.\n*\n* @module @stdlib/constants/float32/sqrt-three\n* @type {number}\n*\n* @example\n* import FLOAT32_SQRT3 from '@stdlib/constants/float32/sqrt-three';\n* // returns 1.7320507764816284\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `3` as a single-precision floating-point number.\n*\n* ```tex\n* \\sqrt{3}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7320507764816284\n*/\nvar FLOAT32_SQRT3 = 1.7320507764816284;\n\n\n// EXPORTS //\n\nexport default FLOAT32_SQRT3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apéry's constant.\n*\n* @module @stdlib/constants/float64/apery\n* @type {number}\n*\n* @example\n* import APERY from '@stdlib/constants/float64/apery';\n* // returns 1.2020569031595942\n*/\n\n\n// MAIN //\n\n/**\n* Apéry's constant.\n*\n* @constant\n* @type {number}\n* @default 1.2020569031595942\n* @see [OEIS]{@link https://oeis.org/A002117}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Ap%C3%A9ry%27s_constant}\n*/\nvar APERY = 1.20205690315959428539973816151144999076498629234049888179227155534183820578631309018645587360933525814619915; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default APERY;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* @module @stdlib/constants/float64/ninf\n* @type {number}\n*\n* @example\n* import FLOAT64_NINF from '@stdlib/constants/float64/ninf';\n* // returns -Infinity\n*/\n\n// MODULES //\n\nimport Number from '@stdlib/number/ctor';\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point negative infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point negative infinity has the bit sequence\n*\n* ```binarystring\n* 1 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.NEGATIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NINF = Number.NEGATIVE_INFINITY;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants/float64/pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants/float64/pinf';\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name APERY\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/apery}\n*/\nimport APERY from './../../float64/apery';\nsetReadOnly( constants, 'APERY', APERY );\n\n/**\n* @name CATALAN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/catalan}\n*/\nimport CATALAN from './../../float64/catalan';\nsetReadOnly( constants, 'CATALAN', CATALAN );\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/cbrt-eps}\n*/\nimport CBRT_EPS from './../../float64/cbrt-eps';\nsetReadOnly( constants, 'CBRT_EPS', CBRT_EPS );\n\n/**\n* @name E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/e}\n*/\nimport E from './../../float64/e';\nsetReadOnly( constants, 'E', E );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/eps}\n*/\nimport EPS from './../../float64/eps';\nsetReadOnly( constants, 'EPS', EPS );\n\n/**\n* @name EULERGAMMA\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/eulergamma}\n*/\nimport EULERGAMMA from './../../float64/eulergamma';\nsetReadOnly( constants, 'EULERGAMMA', EULERGAMMA );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/exponent-bias}\n*/\nimport EXPONENT_BIAS from './../../float64/exponent-bias';\nsetReadOnly( constants, 'EXPONENT_BIAS', EXPONENT_BIAS );\n\n/**\n* @name FOURTH_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/fourth-pi}\n*/\nimport FOURTH_PI from './../../float64/fourth-pi';\nsetReadOnly( constants, 'FOURTH_PI', FOURTH_PI );\n\n/**\n* @name FOURTH_ROOT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/fourth-root-eps}\n*/\nimport FOURTH_ROOT_EPS from './../../float64/fourth-root-eps';\nsetReadOnly( constants, 'FOURTH_ROOT_EPS', FOURTH_ROOT_EPS );\n\n/**\n* @name GAMMA_LANCZOS_G\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/gamma-lanczos-g}\n*/\nimport GAMMA_LANCZOS_G from './../../float64/gamma-lanczos-g';\nsetReadOnly( constants, 'GAMMA_LANCZOS_G', GAMMA_LANCZOS_G );\n\n/**\n* @name GLAISHER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/glaisher-kinkelin}\n*/\nimport GLAISHER from './../../float64/glaisher-kinkelin';\nsetReadOnly( constants, 'GLAISHER', GLAISHER );\n\n/**\n* @name HALF_LN2\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/half-ln-two}\n*/\nimport HALF_LN2 from './../../float64/half-ln-two';\nsetReadOnly( constants, 'HALF_LN2', HALF_LN2 );\n\n/**\n* @name HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/half-pi}\n*/\nimport HALF_PI from './../../float64/half-pi';\nsetReadOnly( constants, 'HALF_PI', HALF_PI );\n\n/**\n* @name HIGH_WORD_ABS_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-abs-mask}\n*/\nimport HIGH_WORD_ABS_MASK from './../../float64/high-word-abs-mask';\nsetReadOnly( constants, 'HIGH_WORD_ABS_MASK', HIGH_WORD_ABS_MASK );\n\n/**\n* @name HIGH_WORD_EXPONENT_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-exponent-mask}\n*/\nimport HIGH_WORD_EXPONENT_MASK from './../../float64/high-word-exponent-mask';\nsetReadOnly( constants, 'HIGH_WORD_EXPONENT_MASK', HIGH_WORD_EXPONENT_MASK );\n\n/**\n* @name HIGH_WORD_SIGN_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-sign-mask}\n*/\nimport HIGH_WORD_SIGN_MASK from './../../float64/high-word-sign-mask';\nsetReadOnly( constants, 'HIGH_WORD_SIGN_MASK', HIGH_WORD_SIGN_MASK );\n\n/**\n* @name HIGH_WORD_SIGNIFICAND_MASK\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/high-word-significand-mask}\n*/\nimport HIGH_WORD_SIGNIFICAND_MASK from './../../float64/high-word-significand-mask';\nsetReadOnly( constants, 'HIGH_WORD_SIGNIFICAND_MASK', HIGH_WORD_SIGNIFICAND_MASK );\n\n/**\n* @name LN_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-half}\n*/\nimport LN_HALF from './../../float64/ln-half';\nsetReadOnly( constants, 'LN_HALF', LN_HALF );\n\n/**\n* @name LN_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-pi}\n*/\nimport LN_PI from './../../float64/ln-pi';\nsetReadOnly( constants, 'LN_PI', LN_PI );\n\n/**\n* @name LN_SQRT_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-sqrt-two-pi}\n*/\nimport LN_SQRT_TWO_PI from './../../float64/ln-sqrt-two-pi';\nsetReadOnly( constants, 'LN_SQRT_TWO_PI', LN_SQRT_TWO_PI );\n\n/**\n* @name LN10\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-ten}\n*/\nimport LN10 from './../../float64/ln-ten';\nsetReadOnly( constants, 'LN10', LN10 );\n\n/**\n* @name LN2\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-two}\n*/\nimport LN2 from './../../float64/ln-two';\nsetReadOnly( constants, 'LN2', LN2 );\n\n/**\n* @name LN_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ln-two-pi}\n*/\nimport LN_TWO_PI from './../../float64/ln-two-pi';\nsetReadOnly( constants, 'LN_TWO_PI', LN_TWO_PI );\n\n/**\n* @name LOG2E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/log2-e}\n*/\nimport LOG2E from './../../float64/log2-e';\nsetReadOnly( constants, 'LOG2E', LOG2E );\n\n/**\n* @name LOG10E\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/log10-e}\n*/\nimport LOG10E from './../../float64/log10-e';\nsetReadOnly( constants, 'LOG10E', LOG10E );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max}\n*/\nimport MAX from './../../float64/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MAX_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base2-exponent}\n*/\nimport MAX_BASE2_EXPONENT from './../../float64/max-base2-exponent';\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT', MAX_BASE2_EXPONENT );\n\n/**\n* @name MAX_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base2-exponent-subnormal}\n*/\nimport MAX_BASE2_EXPONENT_SUBNORMAL from './../../float64/max-base2-exponent-subnormal';\nsetReadOnly( constants, 'MAX_BASE2_EXPONENT_SUBNORMAL', MAX_BASE2_EXPONENT_SUBNORMAL );\n\n/**\n* @name MAX_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base10-exponent}\n*/\nimport MAX_BASE10_EXPONENT from './../../float64/max-base10-exponent';\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT', MAX_BASE10_EXPONENT );\n\n/**\n* @name MAX_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-base10-exponent-subnormal}\n*/\nimport MAX_BASE10_EXPONENT_SUBNORMAL from './../../float64/max-base10-exponent-subnormal';\nsetReadOnly( constants, 'MAX_BASE10_EXPONENT_SUBNORMAL', MAX_BASE10_EXPONENT_SUBNORMAL );\n\n/**\n* @name MAX_LN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-ln}\n*/\nimport MAX_LN from './../../float64/max-ln';\nsetReadOnly( constants, 'MAX_LN', MAX_LN );\n\n/**\n* @name MAX_SAFE_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-fibonacci}\n*/\nimport MAX_SAFE_FIBONACCI from './../../float64/max-safe-fibonacci';\nsetReadOnly( constants, 'MAX_SAFE_FIBONACCI', MAX_SAFE_FIBONACCI );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-integer}\n*/\nimport MAX_SAFE_INTEGER from './../../float64/max-safe-integer';\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER );\n\n/**\n* @name MAX_SAFE_LUCAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-lucas}\n*/\nimport MAX_SAFE_LUCAS from './../../float64/max-safe-lucas';\nsetReadOnly( constants, 'MAX_SAFE_LUCAS', MAX_SAFE_LUCAS );\n\n/**\n* @name MAX_SAFE_NTH_FIBONACCI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-nth-fibonacci}\n*/\nimport MAX_SAFE_NTH_FIBONACCI from './../../float64/max-safe-nth-fibonacci';\nsetReadOnly( constants, 'MAX_SAFE_NTH_FIBONACCI', MAX_SAFE_NTH_FIBONACCI );\n\n/**\n* @name MAX_SAFE_NTH_LUCAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/max-safe-nth-lucas}\n*/\nimport MAX_SAFE_NTH_LUCAS from './../../float64/max-safe-nth-lucas';\nsetReadOnly( constants, 'MAX_SAFE_NTH_LUCAS', MAX_SAFE_NTH_LUCAS );\n\n/**\n* @name MIN_BASE2_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base2-exponent}\n*/\nimport MIN_BASE2_EXPONENT from './../../float64/min-base2-exponent';\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT', MIN_BASE2_EXPONENT );\n\n/**\n* @name MIN_BASE2_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base2-exponent-subnormal}\n*/\nimport MIN_BASE2_EXPONENT_SUBNORMAL from './../../float64/min-base2-exponent-subnormal';\nsetReadOnly( constants, 'MIN_BASE2_EXPONENT_SUBNORMAL', MIN_BASE2_EXPONENT_SUBNORMAL );\n\n/**\n* @name MIN_BASE10_EXPONENT\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base10-exponent}\n*/\nimport MIN_BASE10_EXPONENT from './../../float64/min-base10-exponent';\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT', MIN_BASE10_EXPONENT );\n\n/**\n* @name MIN_BASE10_EXPONENT_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-base10-exponent-subnormal}\n*/\nimport MIN_BASE10_EXPONENT_SUBNORMAL from './../../float64/min-base10-exponent-subnormal';\nsetReadOnly( constants, 'MIN_BASE10_EXPONENT_SUBNORMAL', MIN_BASE10_EXPONENT_SUBNORMAL );\n\n/**\n* @name MIN_LN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-ln}\n*/\nimport MIN_LN from './../../float64/min-ln';\nsetReadOnly( constants, 'MIN_LN', MIN_LN );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/min-safe-integer}\n*/\nimport MIN_SAFE_INTEGER from './../../float64/min-safe-integer';\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER );\n\n/**\n* @name NAN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/nan}\n*/\nimport NAN from './../../float64/nan';\nsetReadOnly( constants, 'NAN', NAN );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/ninf}\n*/\nimport NINF from './../../float64/ninf';\nsetReadOnly( constants, 'NINF', NINF );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/num-bytes}\n*/\nimport NUM_BYTES from './../../float64/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/phi}\n*/\nimport PHI from './../../float64/phi';\nsetReadOnly( constants, 'PHI', PHI );\n\n/**\n* @name PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pi}\n*/\nimport PI from './../../float64/pi';\nsetReadOnly( constants, 'PI', PI );\n\n/**\n* @name PI_SQUARED\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pi-squared}\n*/\nimport PI_SQUARED from './../../float64/pi-squared';\nsetReadOnly( constants, 'PI_SQUARED', PI_SQUARED );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/pinf}\n*/\nimport PINF from './../../float64/pinf';\nsetReadOnly( constants, 'PINF', PINF );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/precision}\n*/\nimport PRECISION from './../../float64/precision';\nsetReadOnly( constants, 'PRECISION', PRECISION );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/smallest-normal}\n*/\nimport SMALLEST_NORMAL from './../../float64/smallest-normal';\nsetReadOnly( constants, 'SMALLEST_NORMAL', SMALLEST_NORMAL );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/smallest-subnormal}\n*/\nimport SMALLEST_SUBNORMAL from './../../float64/smallest-subnormal';\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', SMALLEST_SUBNORMAL );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-eps}\n*/\nimport SQRT_EPS from './../../float64/sqrt-eps';\nsetReadOnly( constants, 'SQRT_EPS', SQRT_EPS );\n\n/**\n* @name SQRT_HALF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-half}\n*/\nimport SQRT_HALF from './../../float64/sqrt-half';\nsetReadOnly( constants, 'SQRT_HALF', SQRT_HALF );\n\n/**\n* @name SQRT_HALF_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-half-pi}\n*/\nimport SQRT_HALF_PI from './../../float64/sqrt-half-pi';\nsetReadOnly( constants, 'SQRT_HALF_PI', SQRT_HALF_PI );\n\n/**\n* @name SQRT_PHI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-phi}\n*/\nimport SQRT_PHI from './../../float64/sqrt-phi';\nsetReadOnly( constants, 'SQRT_PHI', SQRT_PHI );\n\n/**\n* @name SQRT_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-pi}\n*/\nimport SQRT_PI from './../../float64/sqrt-pi';\nsetReadOnly( constants, 'SQRT_PI', SQRT_PI );\n\n/**\n* @name SQRT_THREE\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-three}\n*/\nimport SQRT_THREE from './../../float64/sqrt-three';\nsetReadOnly( constants, 'SQRT_THREE', SQRT_THREE );\n\n/**\n* @name SQRT_TWO\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-two}\n*/\nimport SQRT_TWO from './../../float64/sqrt-two';\nsetReadOnly( constants, 'SQRT_TWO', SQRT_TWO );\n\n/**\n* @name SQRT_TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/sqrt-two-pi}\n*/\nimport SQRT_TWO_PI from './../../float64/sqrt-two-pi';\nsetReadOnly( constants, 'SQRT_TWO_PI', SQRT_TWO_PI );\n\n/**\n* @name TWO_PI\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float64/two-pi}\n*/\nimport TWO_PI from './../../float64/two-pi';\nsetReadOnly( constants, 'TWO_PI', TWO_PI );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Catalan's constant.\n*\n* @module @stdlib/constants/float64/catalan\n* @type {number}\n*\n* @example\n* import CATALAN from '@stdlib/constants/float64/catalan';\n* // returns 0.915965594177219\n*/\n\n\n// MAIN //\n\n/**\n* Catalan's constant.\n*\n* @constant\n* @type {number}\n* @default 0.915965594177219\n* @see [OEIS]{@link http://oeis.org/A006752}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Catalan%27s_constant}\n*/\nvar CATALAN = 0.91596559417721901505460351493238411077414937428167213426649812;\n\n\n// EXPORTS //\n\nexport default CATALAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cube root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/cbrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_CBRT_EPSILON from '@stdlib/constants/float64/cbrt-eps';\n* // returns 0.0000060554544523933395\n*/\n\n\n// MAIN //\n\n/**\n* Cube root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt[3]{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0000060554544523933395\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_CBRT_EPSILON = 6.05545445239333906078989272793696693569753008995e-6;\n\n\n// EXPORTS //\n\nexport default FLOAT64_CBRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Euler's number.\n*\n* @module @stdlib/constants/float64/e\n* @type {number}\n*\n* @example\n* import E from '@stdlib/constants/float64/e';\n* // returns 2.718281828459045\n*/\n\n\n// MAIN //\n\n/**\n* Euler's number.\n*\n* @constant\n* @type {number}\n* @default 2.718281828459045\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}\n*/\nvar E = 2.718281828459045235360287471352662497757247093699959574966;\n\n\n// EXPORTS //\n\nexport default E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/eps\n* @type {number}\n*\n* @example\n* import FLOAT64_EPSILON from '@stdlib/constants/float64/eps';\n* // returns 2.220446049250313e-16\n*/\n\n\n// MAIN //\n\n/**\n* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.\n*\n* ## Notes\n*\n* The difference is\n*\n* ```tex\n* \\frac{1}{2^{52}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.220446049250313e-16\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;\n\n\n// EXPORTS //\n\nexport default FLOAT64_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @module @stdlib/constants/float64/eulergamma\n* @type {number}\n*\n* @example\n* import EULERGAMMA from '@stdlib/constants/float64/eulergamma';\n* // returns 0.5772156649015329\n*/\n\n\n// MAIN //\n\n/**\n* The Euler-Mascheroni constant.\n*\n* @constant\n* @type {number}\n* @default 0.5772156649015329\n* @see [OEIS]{@link http://oeis.org/A001620}\n* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}\n*/\nvar EULERGAMMA = 0.577215664901532860606512090082402431042;\n\n\n// EXPORTS //\n\nexport default EULERGAMMA;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The bias of a double-precision floating-point number's exponent.\n*\n* @module @stdlib/constants/float64/exponent-bias\n* @type {integer32}\n*\n* @example\n* import FLOAT64_EXPONENT_BIAS from '@stdlib/constants/float64/exponent-bias';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* Bias of a double-precision floating-point number's exponent.\n*\n* ## Notes\n*\n* The bias can be computed via\n*\n* ```tex\n* \\mathrm{bias} = 2^{k-1} - 1\n* ```\n*\n* where \\\\(k\\\\) is the number of bits in the exponent; here, \\\\(k = 11\\\\).\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_EXPONENT_BIAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/fourth-pi\n* @type {number}\n*\n* @example\n* import FOURTH_PI from '@stdlib/constants/float64/fourth-pi';\n* // returns 7.85398163397448309616e-1\n*/\n\n\n// MAIN //\n\n/**\n* One fourth times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 7.85398163397448309616e-1\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar FOURTH_PI = 7.85398163397448309616e-1;\n\n\n// EXPORTS //\n\nexport default FOURTH_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fourth root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/fourth-root-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_FOURTH_ROOT_EPS from '@stdlib/constants/float64/fourth-root-eps';\n* // returns 0.0001220703125\n*/\n\n\n// MAIN //\n\n/**\n* Fourth root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\sqrt{\\frac{1}{2^{52}}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.0001220703125\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_FOURTH_ROOT_EPS = 0.0001220703125;\n\n\n// EXPORTS //\n\nexport default FLOAT64_FOURTH_ROOT_EPS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @module @stdlib/constants/float64/gamma-lanczos-g\n* @type {number}\n*\n* @example\n* import FLOAT64_GAMMA_LANCZOS_G from '@stdlib/constants/float64/gamma-lanczos-g';\n* // returns 10.900511\n*/\n\n\n// MAIN //\n\n/**\n* Arbitrary constant `g` to be used in Lanczos approximation functions.\n*\n* @constant\n* @type {number}\n* @default 10.900511\n* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}\n*/\nvar FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;\n\n\n// EXPORTS //\n\nexport default FLOAT64_GAMMA_LANCZOS_G;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Glaisher-Kinkelin constant.\n*\n* @module @stdlib/constants/float64/glaisher-kinkelin\n* @type {number}\n*\n* @example\n* import A from '@stdlib/constants/float64/glaisher-kinkelin';\n* // returns 1.2824271291006226\n*/\n\n\n// MAIN //\n\n/**\n* Glaisher-Kinkelin constant.\n*\n* @constant\n* @type {number}\n* @default 1.2824271291006226\n* @see [OEIS]{@link https://oeis.org/A074962}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Glaisher%E2%80%93Kinkelin_constant}\n*/\nvar A = 1.28242712910062263687534256886979172776768892732500119206374002174040630885882646112973649195820237439420646120; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default A;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the natural logarithm of 2.\n*\n* @module @stdlib/constants/float64/half-ln-two\n* @type {number}\n*\n* @example\n* import HALF_LN2 from '@stdlib/constants/float64/half-ln-two';\n* // returns 3.46573590279972654709e-01\n*/\n\n// MAIN //\n\n/**\n* One half times the natural logarithm of 2.\n*\n* ```tex\n* \\frac{\\ln 2}{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 3.46573590279972654709e-01\n*/\nvar HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF\n\n\n// EXPORTS //\n\nexport default HALF_LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/half-pi\n* @type {number}\n*\n* @example\n* import HALF_PI from '@stdlib/constants/float64/half-pi';\n* // returns 1.5707963267948966\n*/\n\n\n// MAIN //\n\n/**\n* One half times the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.5707963267948966\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar HALF_PI = 1.5707963267948966;\n\n\n// EXPORTS //\n\nexport default HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-abs-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_ABS_MASK from '@stdlib/constants/float64/high-word-abs-mask';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for excluding the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for excluding the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483647 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7fffffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_ABS_MASK = 0x7fffffff>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_ABS_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-exponent-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_EXPONENT_MASK from '@stdlib/constants/float64/high-word-exponent-mask';\n* // returns 2146435072\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the exponent of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2146435072 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x7ff00000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_EXPONENT_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-sign-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGN_MASK from '@stdlib/constants/float64/high-word-sign-mask';\n* // returns 2147483648\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the sign bit of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the sign bit of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 2147483648 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 1 00000000000 00000000000000000000\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x80000000\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGN_MASK = 0x80000000>>>0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGN_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/high-word-significand-mask\n* @type {uinteger32}\n*\n* @example\n* import FLOAT64_HIGH_WORD_SIGNIFICAND_MASK from '@stdlib/constants/float64/high-word-significand-mask';\n* // returns 1048575\n*/\n\n\n// MAIN //\n\n/**\n* High word mask for the significand of a double-precision floating-point number.\n*\n* ## Notes\n*\n* The high word mask for the significand of a double-precision floating-point number is an unsigned 32-bit integer with the value \\\\( 1048575 \\\\), which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 11111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 0x000fffff\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_HIGH_WORD_SIGNIFICAND_MASK = 0x000fffff;\n\n\n// EXPORTS //\n\nexport default FLOAT64_HIGH_WORD_SIGNIFICAND_MASK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `1/2`.\n*\n* @module @stdlib/constants/float64/ln-half\n* @type {number}\n*\n* @example\n* import LN_HALF from '@stdlib/constants/float64/ln-half';\n* // returns -0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `1/2`.\n*\n* ```tex\n* \\ln (1/2)\n* ```\n*\n* @constant\n* @type {number}\n* @default -0.6931471805599453\n*/\nvar LN_HALF = -0.69314718055994530941723212145817656807550013436025525412;\n\n\n// EXPORTS //\n\nexport default LN_HALF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/ln-pi\n* @type {number}\n*\n* @example\n* import LN_PI from '@stdlib/constants/float64/ln-pi';\n* // returns 1.1447298858494002\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.1447298858494002\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar LN_PI = 1.1447298858494002;\n\n\n// EXPORTS //\n\nexport default LN_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* @module @stdlib/constants/float64/ln-sqrt-two-pi\n* @type {number}\n*\n* @example\n* import LN_SQRT_TWO_PI from '@stdlib/constants/float64/ln-sqrt-two-pi';\n* // returns 0.9189385332046728\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the square root of `2π`.\n*\n* ```tex\n* \\ln \\sqrt{2\\pi}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.9189385332046728\n*/\nvar LN_SQRT_TWO_PI = 9.18938533204672741780329736405617639861397473637783412817151540482765695927260397694743298635954197622005646625e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN_SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `10`.\n*\n* @module @stdlib/constants/float64/ln-ten\n* @type {number}\n*\n* @example\n* import LN10 from '@stdlib/constants/float64/ln-ten';\n* // returns 2.302585092994046\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `10`.\n*\n* ```tex\n* \\ln 10\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.302585092994046\n*/\nvar LN10 = 2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN10;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2`.\n*\n* @module @stdlib/constants/float64/ln-two\n* @type {number}\n*\n* @example\n* import LN2 from '@stdlib/constants/float64/ln-two';\n* // returns 0.6931471805599453\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2`.\n*\n* ```tex\n* \\ln 2\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.6931471805599453\n*/\nvar LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LN2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of `2π`.\n*\n* @module @stdlib/constants/float64/ln-two-pi\n* @type {number}\n*\n* @example\n* import LN_TWO_PI from '@stdlib/constants/float64/ln-two-pi';\n* // returns 1.8378770664093456\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of `2π`.\n*\n* ```tex\n* \\ln 2\\pi\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.8378770664093456\n*/\nvar LN_TWO_PI = 1.837877066409345483560659472811235279722794947275566825634;\n\n\n// EXPORTS //\n\nexport default LN_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Base 2 logarithm of Euler's number.\n*\n* @module @stdlib/constants/float64/log2-e\n* @type {number}\n*\n* @example\n* import LOG2E from '@stdlib/constants/float64/log2-e';\n* // returns 1.4426950408889634\n*/\n\n\n// MAIN //\n\n/**\n* Base 2 logarithm of Euler's number.\n*\n* @constant\n* @type {number}\n* @default 1.4426950408889634\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_%27mathematical_constant%28}\n*/\nvar LOG2E = 1.442695040888963407359924681001892137426645954152985934135;\n\n\n// EXPORTS //\n\nexport default LOG2E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Base 10 logarithm of Euler's number.\n*\n* @module @stdlib/constants/float64/log10-e\n* @type {number}\n*\n* @example\n* import LOG10E from '@stdlib/constants/float64/log10-e';\n* // returns 0.4342944819032518\n*/\n\n\n// MAIN //\n\n/**\n* Base 10 logarithm of Euler's number.\n*\n* @constant\n* @type {number}\n* @default 0.4342944819032518\n* @see [OEIS]{@link https://oeis.org/A001113}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_%27mathematical_constant%28}\n*/\nvar LOG10E = 4.34294481903251827651128918916605082294397005803666566114453783165864649208870774729224949338431748318706106745e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default LOG10E;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX from '@stdlib/constants/float64/max';\n* // returns 1.7976931348623157e+308\n*/\n\n\n// MAIN //\n\n/**\n* Maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The maximum is given by\n*\n* ```tex\n* 2^{1023} (2 - 2^{-52})\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7976931348623157e+308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX = 1.7976931348623157e+308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT from '@stdlib/constants/float64/max-base2-exponent';\n* // returns 1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a double-precision floating-point number.\n*\n* ```text\n* 11111111110 => 2046 - BIAS = 1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default 1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants/float64/max-base2-exponent-subnormal';\n* // returns -1023\n*/\n\n\n// MAIN //\n\n/**\n* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 00000000000 => 0 - BIAS = -1023\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1023\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE10_EXPONENT from '@stdlib/constants/float64/max-base10-exponent';\n* // returns 308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT = 308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The maximum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants/float64/max-base10-exponent-subnormal';\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The maximum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* 2^-1023 = 1.1125369292536007e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/max-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_LN from '@stdlib/constants/float64/max-ln';\n* // returns 709.782712893384\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the maximum double-precision floating-point number.\n*\n* ## Notes\n*\n* The natural logarithm of the maximum is given by\n*\n* ```tex\n* \\ln \\left( 2^{1023} (2 - 2^{-52}) \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default 709.782712893384\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_LN = 709.782712893384;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe Fibonacci number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-fibonacci\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_FIBONACCI from '@stdlib/constants/float64/max-safe-fibonacci';\n* // returns 8944394323791464\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe Fibonacci number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 8944394323791464\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_FIBONACCI = 8944394323791464;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_FIBONACCI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants/float64/max-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants/float64/max-safe-integer';\n* // returns 9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The integer has the value\n*\n* ```tex\n* 2^{53} - 1\n* ```\n*\n* @constant\n* @type {number}\n* @default 9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe Lucas number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-lucas\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_LUCAS from '@stdlib/constants/float64/max-safe-lucas';\n* // returns 7639424778862807\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe Lucas number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 7639424778862807\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_LUCAS = 7639424778862807;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_LUCAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-nth-fibonacci\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_NTH_FIBONACCI from '@stdlib/constants/float64/max-safe-nth-fibonacci';\n* // returns 78\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Fibonacci number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 78\n* @see [Fibonacci number]{@link https://en.wikipedia.org/wiki/Fibonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_FIBONACCI = 78|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_NTH_FIBONACCI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable id-length */\n\n'use strict';\n\n/**\n* Maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @module @stdlib/constants/float64/max-safe-nth-lucas\n* @type {integer}\n*\n* @example\n* import FLOAT64_MAX_SAFE_NTH_LUCAS from '@stdlib/constants/float64/max-safe-nth-lucas';\n* // returns 76\n*/\n\n\n// MAIN //\n\n/**\n* The maximum safe nth Lucas number when stored in double-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 76\n* @see [Lucas number]{@link https://en.wikipedia.org/wiki/Lucas_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MAX_SAFE_NTH_LUCAS = 76|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MAX_SAFE_NTH_LUCAS;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base2-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT from '@stdlib/constants/float64/min-base2-exponent';\n* // returns -1022\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 1 - BIAS = -1022\n* ```\n*\n* where `BIAS = 1023`.\n*\n* @constant\n* @type {integer32}\n* @default -1022\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT = -1022|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base2-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL from '@stdlib/constants/float64/min-base2-exponent-subnormal';\n* // returns -1074\n*/\n\n\n// MAIN //\n\n/**\n* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.\n*\n* ```text\n* -(BIAS+(52-1)) = -(1023+51) = -1074\n* ```\n*\n* where `BIAS = 1023` and `52` is the number of digits in the significand.\n*\n* @constant\n* @type {integer32}\n* @default -1074\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base10-exponent\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT from '@stdlib/constants/float64/min-base10-exponent';\n* // returns -308\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a normal double-precision floating-point number.\n*\n* ```text\n* 2^-1022 = 2.2250738585072014e-308 => -308\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT = -308|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-base10-exponent-subnormal\n* @type {integer32}\n*\n* @example\n* import FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL from '@stdlib/constants/float64/min-base10-exponent-subnormal';\n* // returns -324\n*/\n\n\n// MAIN //\n\n/**\n* The minimum base 10 exponent for a subnormal double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default -324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/min-ln\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_LN from '@stdlib/constants/float64/min-ln';\n* // returns -708.3964185322641\n*/\n\n\n// MAIN //\n\n/**\n* Natural logarithm of the smallest normalized double-precision floating-point number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -\\ln \\left( 2^{1023-1} \\right)\n* ```\n*\n* @constant\n* @type {number}\n* @default -708.3964185322641\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_LN = -708.3964185322641;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_LN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* @module @stdlib/constants/float64/min-safe-integer\n* @type {number}\n*\n* @example\n* import FLOAT64_MIN_SAFE_INTEGER from '@stdlib/constants/float64/min-safe-integer';\n* // returns -9007199254740991\n*/\n\n\n// MAIN //\n\n/**\n* Minimum safe double-precision floating-point integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{53} - 1)\n* ```\n*\n* @constant\n* @type {number}\n* @default -9007199254740991\n* @see [Safe Integers]{@link http://www.2ality.com/2013/10/safe-integers.html}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_MIN_SAFE_INTEGER = -9007199254740991;\n\n\n// EXPORTS //\n\nexport default FLOAT64_MIN_SAFE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point NaN.\n*\n* @module @stdlib/constants/float64/nan\n* @type {number}\n*\n* @example\n* import FLOAT64_NAN from '@stdlib/constants/float64/nan';\n* // returns NaN\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point NaN.\n*\n* @constant\n* @type {number}\n* @default NaN\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_NAN = NaN;\n\n\n// EXPORTS //\n\nexport default FLOAT64_NAN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/num-bytes\n* @type {integer32}\n*\n* @example\n* import FLOAT64_NUM_BYTES from '@stdlib/constants/float64/num-bytes';\n* // returns 8\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a double-precision floating-point number.\n*\n* @constant\n* @type {integer32}\n* @default 8\n*/\nvar FLOAT64_NUM_BYTES = 8|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Golden ratio.\n*\n* @module @stdlib/constants/float64/phi\n* @type {number}\n*\n* @example\n* import PHI from '@stdlib/constants/float64/phi';\n* // returns 1.618033988749895\n*/\n\n\n// MAIN //\n\n/**\n* Golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.618033988749895\n* @see [OEIS]{@link http://oeis.org/A001622}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar PHI = 1.61803398874989484820458683436563811772030917980576286213544862;\n\n\n// EXPORTS //\n\nexport default PHI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/pi\n* @type {number}\n*\n* @example\n* import PI from '@stdlib/constants/float64/pi';\n* // returns 3.141592653589793\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 3.141592653589793\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/pi-squared\n* @type {number}\n*\n* @example\n* import PI_SQUARED from '@stdlib/constants/float64/pi-squared';\n* // returns 9.869604401089358\n*/\n\n\n// MAIN //\n\n/**\n* Square of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 9.869604401089358\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar PI_SQUARED = 9.86960440108935861883449099987615113531369940724079062641334937622004482241920524300177340371855223182402591377; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default PI_SQUARED;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Effective number of bits in the significand of a double-precision floating-point number.\n*\n* @module @stdlib/constants/float64/precision\n* @type {integer32}\n*\n* @example\n* import FLOAT64_PRECISION from '@stdlib/constants/float64/precision';\n* // returns 53\n*/\n\n\n// MAIN //\n\n/**\n* The effective number of bits in the significand of a double-precision floating-point number is `52` significand bits plus `1` hidden bit.\n*\n* @constant\n* @type {integer32}\n* @default 53\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PRECISION = 53|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default FLOAT64_PRECISION;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point normal number.\n*\n* @module @stdlib/constants/float64/smallest-normal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_NORMAL from '@stdlib/constants/float64/smallest-normal';\n* // returns 2.2250738585072014e-308\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point normal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000001 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default 2.2250738585072014e-308\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_NORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Smallest positive double-precision floating-point subnormal number.\n*\n* @module @stdlib/constants/float64/smallest-subnormal\n* @type {number}\n*\n* @example\n* import FLOAT64_SMALLEST_SUBNORMAL from '@stdlib/constants/float64/smallest-subnormal';\n* // returns 4.940656458412465e-324\n*/\n\n\n// MAIN //\n\n/**\n* The smallest positive double-precision floating-point subnormal number.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* \\frac{1}{2^{1023-1} 2^{52}}\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0 00000000000 00000000000000000000 00000000000000000000000000000001\n* ```\n*\n* @constant\n* @type {number}\n* @default 4.940656458412465e-324\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_SMALLEST_SUBNORMAL = 4.940656458412465e-324;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SMALLEST_SUBNORMAL;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* @module @stdlib/constants/float64/sqrt-eps\n* @type {number}\n*\n* @example\n* import FLOAT64_SQRT_EPSILON from '@stdlib/constants/float64/sqrt-eps';\n* // returns 0.14901161193847656e-7\n*/\n\n\n// MAIN //\n\n/**\n* Square root of double-precision floating-point epsilon.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2^{52}}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.14901161193847656e-7\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}\n*/\nvar FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;\n\n\n// EXPORTS //\n\nexport default FLOAT64_SQRT_EPSILON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `1/2`.\n*\n* @module @stdlib/constants/float64/sqrt-half\n* @type {number}\n*\n* @example\n* import SQRT_HALF from '@stdlib/constants/float64/sqrt-half';\n* // returns 0.7071067811865476\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `1/2`.\n*\n* ```tex\n* \\sqrt{\\frac{1}{2}}\n* ```\n*\n* @constant\n* @type {number}\n* @default 0.7071067811865476\n*/\nvar SQRT_HALF = 7.07106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506923115e-01; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default SQRT_HALF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` divided by `2`.\n*\n* @module @stdlib/constants/float64/sqrt-half-pi\n* @type {number}\n*\n* @example\n* import SQRT_HALF_PI from '@stdlib/constants/float64/sqrt-half-pi';\n* // returns 1.2533141373155003\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` divided by `2`.\n*\n* @constant\n* @type {number}\n* @default 1.2533141373155003\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_HALF_PI = 1.253314137315500251207882642405522626503493370304969158314;\n\n\n// EXPORTS //\n\nexport default SQRT_HALF_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the golden ratio.\n*\n* @module @stdlib/constants/float64/sqrt-phi\n* @type {number}\n*\n* @example\n* import SQRT_PHI from '@stdlib/constants/float64/sqrt-phi';\n* // returns 1.272019649514069\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the golden ratio.\n*\n* @constant\n* @type {number}\n* @default 1.272019649514069\n* @see [OEIS]{@link http://oeis.org/A139339}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Golden_ratio}\n*/\nvar SQRT_PHI = 1.27201964951406896425242246173749149171560804184009624861664038;\n\n\n// EXPORTS //\n\nexport default SQRT_PHI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @module @stdlib/constants/float64/sqrt-pi\n* @type {number}\n*\n* @example\n* import SQRT_PI from '@stdlib/constants/float64/sqrt-pi';\n* // returns 1.7724538509055160\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π`.\n*\n* @constant\n* @type {number}\n* @default 1.7724538509055160\n* @see [OEIS]{@link https://oeis.org/A002161}\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_PI = 1.772453850905516027298167483341145182797549456122387128213;\n\n\n// EXPORTS //\n\nexport default SQRT_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `3`.\n*\n* @module @stdlib/constants/float64/sqrt-three\n* @type {number}\n*\n* @example\n* import SQRT3 from '@stdlib/constants/float64/sqrt-three';\n* // returns 1.7320508075688772\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `3`.\n*\n* ```tex\n* \\sqrt{3}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.7320508075688772\n*/\nvar SQRT3 = 1.732050807568877293527446341505872366942805253810380628055e+00;\n\n\n// EXPORTS //\n\nexport default SQRT3;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of `2`.\n*\n* @module @stdlib/constants/float64/sqrt-two\n* @type {number}\n*\n* @example\n* import SQRT2 from '@stdlib/constants/float64/sqrt-two';\n* // returns 1.4142135623730951\n*/\n\n\n// MAIN //\n\n/**\n* Square root of `2`.\n*\n* ```tex\n* \\sqrt{2}\n* ```\n*\n* @constant\n* @type {number}\n* @default 1.4142135623730951\n*/\nvar SQRT2 = 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default SQRT2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants/float64/sqrt-two-pi\n* @type {number}\n*\n* @example\n* import SQRT_TWO_PI from '@stdlib/constants/float64/sqrt-two-pi';\n* // returns 2.5066282746310007\n*/\n\n\n// MAIN //\n\n/**\n* Square root of the mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 2.5066282746310007\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;\n\n\n// EXPORTS //\n\nexport default SQRT_TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @module @stdlib/constants/float64/two-pi\n* @type {number}\n*\n* @example\n* import TWO_PI from '@stdlib/constants/float64/two-pi';\n* // returns 6.283185307179586\n*/\n\n\n// MAIN //\n\n/**\n* The mathematical constant `π` times `2`.\n*\n* @constant\n* @type {number}\n* @default 6.283185307179586\n* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}\n*/\nvar TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len\n\n\n// EXPORTS //\n\nexport default TWO_PI;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 8-bit integer.\n*\n* @module @stdlib/constants/int8/max\n* @type {integer32}\n*\n* @example\n* import INT8_MAX from '@stdlib/constants/int8/max';\n* // returns 127\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* 2^{7} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 127\n*/\nvar INT8_MAX = 127|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/max}\n*/\nimport MAX from './../../int8/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/min}\n*/\nimport MIN from './../../int8/min';\nsetReadOnly( constants, 'MIN', MIN );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int8/num-bytes}\n*/\nimport NUM_BYTES from './../../int8/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 8-bit integer.\n*\n* @module @stdlib/constants/int8/min\n* @type {integer32}\n*\n* @example\n* import INT8_MIN from '@stdlib/constants/int8/min';\n* // returns -128\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 8-bit integer.\n*\n* ## Notes\n*\n* The number is given by\n*\n* ```tex\n* -(2^{7})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -128\n*/\nvar INT8_MIN = -128|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of an 8-bit signed integer.\n*\n* @module @stdlib/constants/int8/num-bytes\n* @type {integer32}\n*\n* @example\n* import INT8_NUM_BYTES from '@stdlib/constants/int8/num-bytes';\n* // returns 1\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of an 8-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 1\n*/\nvar INT8_NUM_BYTES = 1|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT8_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 16-bit integer.\n*\n* @module @stdlib/constants/int16/max\n* @type {integer32}\n*\n* @example\n* import INT16_MAX from '@stdlib/constants/int16/max';\n* // returns 32767\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{15} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 0111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 32767\n*/\nvar INT16_MAX = 32767|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/max}\n*/\nimport MAX from './../../int16/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/min}\n*/\nimport MIN from './../../int16/min';\nsetReadOnly( constants, 'MIN', MIN );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int16/num-bytes}\n*/\nimport NUM_BYTES from './../../int16/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 16-bit integer.\n*\n* @module @stdlib/constants/int16/min\n* @type {integer32}\n*\n* @example\n* import INT16_MIN from '@stdlib/constants/int16/min';\n* // returns -32768\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{15})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 1000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -32768\n*/\nvar INT16_MIN = -32768|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 16-bit signed integer.\n*\n* @module @stdlib/constants/int16/num-bytes\n* @type {integer32}\n*\n* @example\n* import INT16_NUM_BYTES from '@stdlib/constants/int16/num-bytes';\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 16-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar INT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT16_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum signed 32-bit integer.\n*\n* @module @stdlib/constants/int32/max\n* @type {integer32}\n*\n* @example\n* import INT32_MAX from '@stdlib/constants/int32/max';\n* // returns 2147483647\n*/\n\n\n// MAIN //\n\n/**\n* Maximum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{31} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 01111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 2147483647\n*/\nvar INT32_MAX = 2147483647|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/max}\n*/\nimport MAX from './../../int32/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MIN\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/min}\n*/\nimport MIN from './../../int32/min';\nsetReadOnly( constants, 'MIN', MIN );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/int32/num-bytes}\n*/\nimport NUM_BYTES from './../../int32/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Minimum signed 32-bit integer.\n*\n* @module @stdlib/constants/int32/min\n* @type {integer32}\n*\n* @example\n* import INT32_MIN from '@stdlib/constants/int32/min';\n* // returns -2147483648\n*/\n\n\n// MAIN //\n\n/**\n* Minimum signed 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* -(2^{31})\n* ```\n*\n* which corresponds to the two's complement bit sequence\n*\n* ```binarystring\n* 10000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default -2147483648\n*/\nvar INT32_MIN = -2147483648|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_MIN;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 32-bit signed integer.\n*\n* @module @stdlib/constants/int32/num-bytes\n* @type {integer32}\n*\n* @example\n* import INT32_NUM_BYTES from '@stdlib/constants/int32/num-bytes';\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 32-bit signed integer.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar INT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default INT32_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Windows path delimiter.\n*\n* @module @stdlib/constants/path/delimiter-win32\n* @type {string}\n*\n* @example\n* import PATH_DELIMITER_WIN32 from '@stdlib/constants/path/delimiter-win32';\n*\n* var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n* var paths = PATH.split( PATH_DELIMITER_WIN32 );\n* // returns ['C:\\\\Windows\\\\system32','C:\\\\Windows','C:\\\\Program Files\\\\node\\\\']\n*/\n\n// MAIN //\n\n/**\n* Path delimiter on Windows platforms.\n*\n* @constant\n* @type {string}\n* @default ';'\n*/\nvar PATH_DELIMITER_WIN32 = ';';\n\n\n// EXPORTS //\n\nexport default PATH_DELIMITER_WIN32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Platform-specific path segment separator.\n*\n* @module @stdlib/constants/path/sep\n* @type {string}\n*\n* @example\n* import IS_WINDOWS from '@stdlib/assert/is-windows';\n* import PATH_SEP from '@stdlib/constants/path/sep';\n*\n* var parts;\n* if ( IS_WINDOWS ) {\n*     parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP );\n*     // returns ['foo','bar','baz']\n* } else {\n*     parts = 'foo/bar/baz'.split( PATH_SEP );\n*     // returns ['foo','bar','baz']\n* }\n*/\n\n// MODULES //\n\nimport IS_WINDOWS from '@stdlib/assert/is-windows';\nimport PATH_SEP_WIN32 from './../../../path/sep-win32';\nimport PATH_SEP_POSIX from './../../../path/sep-posix';\n\n\n// MAIN //\n\nvar PATH_SEP;\nif ( IS_WINDOWS ) {\n\tPATH_SEP = PATH_SEP_WIN32;\n} else {\n\tPATH_SEP = PATH_SEP_POSIX;\n}\n\n\n// EXPORTS //\n\nexport default PATH_SEP;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Windows path segment separator.\n*\n* @module @stdlib/constants/path/sep-win32\n* @type {string}\n*\n* @example\n* import PATH_SEP_WIN32 from '@stdlib/constants/path/sep-win32';\n*\n* var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 );\n* // returns ['foo','bar','baz']\n*/\n\n// MAIN //\n\n/**\n* Path segment separator on Windows platforms.\n*\n* @constant\n* @type {string}\n* @default '\\\\'\n*/\nvar PATH_SEP_WIN32 = '\\\\';\n\n\n// EXPORTS //\n\nexport default PATH_SEP_WIN32;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* POSIX path segment separator.\n*\n* @module @stdlib/constants/path/sep-posix\n* @type {string}\n*\n* @example\n* import PATH_SEP_POSIX from '@stdlib/constants/path/sep-posix';\n*\n* var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX );\n* // returns ['foo','bar','baz']\n*/\n\n// MAIN //\n\n/**\n* Path segment separator on POSIX platforms.\n*\n* @constant\n* @type {string}\n* @default '/'\n*/\nvar PATH_SEP_POSIX = '/';\n\n\n// EXPORTS //\n\nexport default PATH_SEP_POSIX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name DELIMITER\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter}\n*/\nimport DELIMITER from './../../path/delimiter';\nsetReadOnly( ns, 'DELIMITER', DELIMITER );\n\n/**\n* @name DELIMITER_POSIX\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter-posix}\n*/\nimport DELIMITER_POSIX from './../../path/delimiter-posix';\nsetReadOnly( ns, 'DELIMITER_POSIX', DELIMITER_POSIX );\n\n/**\n* @name DELIMITER_WIN32\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/delimiter-win32}\n*/\nimport DELIMITER_WIN32 from './../../path/delimiter-win32';\nsetReadOnly( ns, 'DELIMITER_WIN32', DELIMITER_WIN32 );\n\n/**\n* @name SEP\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep}\n*/\nimport SEP from './../../path/sep';\nsetReadOnly( ns, 'SEP', SEP );\n\n/**\n* @name SEP_POSIX\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep-posix}\n*/\nimport SEP_POSIX from './../../path/sep-posix';\nsetReadOnly( ns, 'SEP_POSIX', SEP_POSIX );\n\n/**\n* @name SEP_WIN32\n* @memberof ns\n* @readonly\n* @type {string}\n* @see {@link module:@stdlib/constants/path/sep-win32}\n*/\nimport SEP_WIN32 from './../../path/sep-win32';\nsetReadOnly( ns, 'SEP_WIN32', SEP_WIN32 );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Platform-specific path delimiter.\n*\n* @module @stdlib/constants/path/delimiter\n* @type {string}\n*\n* @example\n* import IS_WINDOWS from '@stdlib/assert/is-windows';\n* import PATH_DELIMITER from '@stdlib/constants/path/delimiter';\n*\n* var PATH;\n* var paths;\n*\n* if ( IS_WINDOWS ) {\n*     PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n*     paths = PATH.split( PATH_DELIMITER );\n*     // returns ['C:\\\\Windows\\\\system32','C:\\\\Windows','C:\\\\Program Files\\\\node\\\\']\n* } else {\n*     PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n*     paths = PATH.split( PATH_DELIMITER );\n*     // returns ['/usr/bin','/bin','/usr/sbin','/sbin','/usr/local/bin']\n* }\n*/\n\n// MODULES //\n\nimport IS_WINDOWS from '@stdlib/assert/is-windows';\nimport PATH_DELIMITER_WIN32 from './../../../path/delimiter-win32';\nimport PATH_DELIMITER_POSIX from './../../../path/delimiter-posix';\n\n\n// MAIN //\n\nvar PATH_DELIMITER;\nif ( IS_WINDOWS ) {\n\tPATH_DELIMITER = PATH_DELIMITER_WIN32;\n} else {\n\tPATH_DELIMITER = PATH_DELIMITER_POSIX;\n}\n\n\n// EXPORTS //\n\nexport default PATH_DELIMITER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* POSIX path delimiter.\n*\n* @module @stdlib/constants/path/delimiter-posix\n* @type {string}\n*\n* @example\n* import PATH_DELIMITER_POSIX from '@stdlib/constants/path/delimiter-posix';\n*\n* var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n* var paths = PATH.split( PATH_DELIMITER_POSIX );\n* // returns ['/usr/bin','/bin','/usr/sbin','/sbin','/usr/local/bin']\n*/\n\n// MAIN //\n\n/**\n* Path delimiter on POSIX platforms.\n*\n* @constant\n* @type {string}\n* @default ':'\n*/\nvar PATH_DELIMITER_POSIX = ':';\n\n\n// EXPORTS //\n\nexport default PATH_DELIMITER_POSIX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of hours in a day.\n*\n* @module @stdlib/constants/time/hours-in-day\n* @type {integer32}\n*\n* @example\n* import HOURS_IN_DAY from '@stdlib/constants/time/hours-in-day';\n* // returns 24\n*/\n\n\n// MAIN //\n\n/**\n* The number of hours in a day.\n*\n* @constant\n* @type {integer32}\n* @default 24\n*/\nvar HOURS_IN_DAY = 24|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default HOURS_IN_DAY;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name HOURS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/hours-in-day}\n*/\nimport HOURS_IN_DAY from './../../time/hours-in-day';\nsetReadOnly( ns, 'HOURS_IN_DAY', HOURS_IN_DAY );\n\n/**\n* @name HOURS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/hours-in-week}\n*/\nimport HOURS_IN_WEEK from './../../time/hours-in-week';\nsetReadOnly( ns, 'HOURS_IN_WEEK', HOURS_IN_WEEK );\n\n/**\n* @name MILLISECONDS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-day}\n*/\nimport MILLISECONDS_IN_DAY from './../../time/milliseconds-in-day';\nsetReadOnly( ns, 'MILLISECONDS_IN_DAY', MILLISECONDS_IN_DAY );\n\n/**\n* @name MILLISECONDS_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-hour}\n*/\nimport MILLISECONDS_IN_HOUR from './../../time/milliseconds-in-hour';\nsetReadOnly( ns, 'MILLISECONDS_IN_HOUR', MILLISECONDS_IN_HOUR );\n\n/**\n* @name MILLISECONDS_IN_MINUTE\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-minute}\n*/\nimport MILLISECONDS_IN_MINUTE from './../../time/milliseconds-in-minute';\nsetReadOnly( ns, 'MILLISECONDS_IN_MINUTE', MILLISECONDS_IN_MINUTE );\n\n/**\n* @name MILLISECONDS_IN_SECOND\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-second}\n*/\nimport MILLISECONDS_IN_SECOND from './../../time/milliseconds-in-second';\nsetReadOnly( ns, 'MILLISECONDS_IN_SECOND', MILLISECONDS_IN_SECOND );\n\n/**\n* @name MILLISECONDS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/milliseconds-in-week}\n*/\nimport MILLISECONDS_IN_WEEK from './../../time/milliseconds-in-week';\nsetReadOnly( ns, 'MILLISECONDS_IN_WEEK', MILLISECONDS_IN_WEEK );\n\n/**\n* @name MINUTES_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-day}\n*/\nimport MINUTES_IN_DAY from './../../time/minutes-in-day';\nsetReadOnly( ns, 'MINUTES_IN_DAY', MINUTES_IN_DAY );\n\n/**\n* @name MINUTES_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-hour}\n*/\nimport MINUTES_IN_HOUR from './../../time/minutes-in-hour';\nsetReadOnly( ns, 'MINUTES_IN_HOUR', MINUTES_IN_HOUR );\n\n/**\n* @name MINUTES_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/minutes-in-week}\n*/\nimport MINUTES_IN_WEEK from './../../time/minutes-in-week';\nsetReadOnly( ns, 'MINUTES_IN_WEEK', MINUTES_IN_WEEK );\n\n/**\n* @name MONTHS_IN_YEAR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/months-in-year}\n*/\nimport MONTHS_IN_YEAR from './../../time/months-in-year';\nsetReadOnly( ns, 'MONTHS_IN_YEAR', MONTHS_IN_YEAR );\n\n/**\n* @name SECONDS_IN_DAY\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-day}\n*/\nimport SECONDS_IN_DAY from './../../time/seconds-in-day';\nsetReadOnly( ns, 'SECONDS_IN_DAY', SECONDS_IN_DAY );\n\n/**\n* @name SECONDS_IN_HOUR\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-hour}\n*/\nimport SECONDS_IN_HOUR from './../../time/seconds-in-hour';\nsetReadOnly( ns, 'SECONDS_IN_HOUR', SECONDS_IN_HOUR );\n\n/**\n* @name SECONDS_IN_MINUTE\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-minute}\n*/\nimport SECONDS_IN_MINUTE from './../../time/seconds-in-minute';\nsetReadOnly( ns, 'SECONDS_IN_MINUTE', SECONDS_IN_MINUTE );\n\n/**\n* @name SECONDS_IN_WEEK\n* @memberof ns\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/time/seconds-in-week}\n*/\nimport SECONDS_IN_WEEK from './../../time/seconds-in-week';\nsetReadOnly( ns, 'SECONDS_IN_WEEK', SECONDS_IN_WEEK );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of hours in a week.\n*\n* @module @stdlib/constants/time/hours-in-week\n* @type {integer32}\n*\n* @example\n* import HOURS_IN_WEEK from '@stdlib/constants/time/hours-in-week';\n* // returns 168\n*/\n\n\n// MAIN //\n\n/**\n* The number of hours in a week.\n*\n* ```tex\n* 7 \\cdot 24 = 168\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 168\n*/\nvar HOURS_IN_WEEK = 168|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default HOURS_IN_WEEK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a day.\n*\n* @module @stdlib/constants/time/milliseconds-in-day\n* @type {integer32}\n*\n* @example\n* import MILLISECONDS_IN_DAY from '@stdlib/constants/time/milliseconds-in-day';\n* // returns 86400000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a day.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 \\cdot 24 = 86400000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 86400000\n*/\nvar MILLISECONDS_IN_DAY = 86400000|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MILLISECONDS_IN_DAY;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in an hour.\n*\n* @module @stdlib/constants/time/milliseconds-in-hour\n* @type {integer32}\n*\n* @example\n* import MILLISECONDS_IN_HOUR from '@stdlib/constants/time/milliseconds-in-hour';\n* // returns 3600000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in an hour.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 = 3600000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 3600000\n*/\nvar MILLISECONDS_IN_HOUR = 3600000|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MILLISECONDS_IN_HOUR;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a minute.\n*\n* @module @stdlib/constants/time/milliseconds-in-minute\n* @type {integer32}\n*\n* @example\n* import MILLISECONDS_IN_MINUTE from '@stdlib/constants/time/milliseconds-in-minute';\n* // returns 60000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a minute.\n*\n* ```tex\n* 1000 \\cdot 60 = 60000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 60000\n*/\nvar MILLISECONDS_IN_MINUTE = 60000|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MILLISECONDS_IN_MINUTE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a second.\n*\n* @module @stdlib/constants/time/milliseconds-in-second\n* @type {integer32}\n*\n* @example\n* import MILLISECONDS_IN_SECOND from '@stdlib/constants/time/milliseconds-in-second';\n* // returns 1000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a second.\n*\n* @constant\n* @type {integer32}\n* @default 1000\n*/\nvar MILLISECONDS_IN_SECOND = 1000|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MILLISECONDS_IN_SECOND;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of milliseconds in a week.\n*\n* @module @stdlib/constants/time/milliseconds-in-week\n* @type {integer32}\n*\n* @example\n* import MILLISECONDS_IN_WEEK from '@stdlib/constants/time/milliseconds-in-week';\n* // returns 604800000\n*/\n\n\n// MAIN //\n\n/**\n* The number of milliseconds in a week.\n*\n* ```tex\n* 1000 \\cdot 60 \\cdot 60 \\cdot 24 \\cdot 7 = 604800000\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 604800000\n*/\nvar MILLISECONDS_IN_WEEK = 604800000|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MILLISECONDS_IN_WEEK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in a day.\n*\n* @module @stdlib/constants/time/minutes-in-day\n* @type {integer32}\n*\n* @example\n* import MINUTES_IN_DAY from '@stdlib/constants/time/minutes-in-day';\n* // returns 1440\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in a day.\n*\n* ```tex\n* 60 \\cdot 24 = 1440\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 1440\n*/\nvar MINUTES_IN_DAY = 1440|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MINUTES_IN_DAY;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in an hour.\n*\n* @module @stdlib/constants/time/minutes-in-hour\n* @type {integer32}\n*\n* @example\n* import MINUTES_IN_HOUR from '@stdlib/constants/time/minutes-in-hour';\n* // returns 60\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in an hour.\n*\n* @constant\n* @type {integer32}\n* @default 60\n*/\nvar MINUTES_IN_HOUR = 60|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MINUTES_IN_HOUR;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of minutes in a week.\n*\n* @module @stdlib/constants/time/minutes-in-week\n* @type {integer32}\n*\n* @example\n* import MINUTES_IN_WEEK from '@stdlib/constants/time/minutes-in-week';\n* // returns 10080\n*/\n\n\n// MAIN //\n\n/**\n* The number of minutes in a week.\n*\n* ```tex\n* 60 \\cdot 24 \\cdot 7 = 10080\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 10080\n*/\nvar MINUTES_IN_WEEK = 10080|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MINUTES_IN_WEEK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of months in a year.\n*\n* @module @stdlib/constants/time/months-in-year\n* @type {integer32}\n*\n* @example\n* import MONTHS_IN_YEAR from '@stdlib/constants/time/months-in-year';\n* // returns 12\n*/\n\n\n// MAIN //\n\n/**\n* The number of months in a year.\n*\n* @constant\n* @type {integer32}\n* @default 12\n*/\nvar MONTHS_IN_YEAR = 12|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default MONTHS_IN_YEAR;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a day.\n*\n* @module @stdlib/constants/time/seconds-in-day\n* @type {integer32}\n*\n* @example\n* import SECONDS_IN_DAY from '@stdlib/constants/time/seconds-in-day';\n* // returns 86400\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a day.\n*\n* ```tex\n* 60 \\cdot 60 \\cdot 24 = 86400\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 86400\n*/\nvar SECONDS_IN_DAY = 86400|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default SECONDS_IN_DAY;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in an hour.\n*\n* @module @stdlib/constants/time/seconds-in-hour\n* @type {integer32}\n*\n* @example\n* import SECONDS_IN_HOUR from '@stdlib/constants/time/seconds-in-hour';\n* // returns 3600\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in an hour.\n*\n* ```tex\n* 60 \\cdot 60 = 3600\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 3600\n*/\nvar SECONDS_IN_HOUR = 3600|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default SECONDS_IN_HOUR;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a minute.\n*\n* @module @stdlib/constants/time/seconds-in-minute\n* @type {integer32}\n*\n* @example\n* import SECONDS_IN_MINUTE from '@stdlib/constants/time/seconds-in-minute';\n* // returns 60\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a minute.\n*\n* @constant\n* @type {integer32}\n* @default 60\n*/\nvar SECONDS_IN_MINUTE = 60|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default SECONDS_IN_MINUTE;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Number of seconds in a week.\n*\n* @module @stdlib/constants/time/seconds-in-week\n* @type {integer32}\n*\n* @example\n* import SECONDS_IN_WEEK from '@stdlib/constants/time/seconds-in-week';\n* // returns 604800\n*/\n\n\n// MAIN //\n\n/**\n* The number of seconds in a week.\n*\n* ```tex\n* 60 \\cdot 60 \\cdot 24 \\cdot 7 = 604800\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 604800\n*/\nvar SECONDS_IN_WEEK = 604800|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default SECONDS_IN_WEEK;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* @module @stdlib/constants/uint8/max\n* @type {integer32}\n*\n* @example\n* import UINT8_MAX from '@stdlib/constants/uint8/max';\n* // returns 255\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 8-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{8} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 255\n*/\nvar UINT8_MAX = 255|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint8/max}\n*/\nimport MAX from './../../uint8/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint8/num-bytes}\n*/\nimport NUM_BYTES from './../../uint8/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @module @stdlib/constants/uint8/num-bytes\n* @type {integer32}\n*\n* @example\n* import UINT8_NUM_BYTES from '@stdlib/constants/uint8/num-bytes';\n* // returns 1\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of an 8-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 1\n*/\nvar UINT8_NUM_BYTES = 1|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT8_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* @module @stdlib/constants/uint16/max\n* @type {integer32}\n*\n* @example\n* import UINT16_MAX from '@stdlib/constants/uint16/max';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 16-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{16} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 1111111111111111\n* ```\n*\n* @constant\n* @type {integer32}\n* @default 65535\n*/\nvar UINT16_MAX = 65535|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint16/max}\n*/\nimport MAX from './../../uint16/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint16/num-bytes}\n*/\nimport NUM_BYTES from './../../uint16/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 16-bit unsigned integer.\n*\n* @module @stdlib/constants/uint16/num-bytes\n* @type {integer32}\n*\n* @example\n* import UINT16_NUM_BYTES from '@stdlib/constants/uint16/num-bytes';\n* // returns 2\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 16-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 2\n*/\nvar UINT16_NUM_BYTES = 2|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT16_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* @module @stdlib/constants/uint32/max\n* @type {uinteger32}\n*\n* @example\n* import UINT32_MAX from '@stdlib/constants/uint32/max';\n* // returns 4294967295\n*/\n\n\n// MAIN //\n\n/**\n* Maximum unsigned 32-bit integer.\n*\n* ## Notes\n*\n* The number has the value\n*\n* ```tex\n* 2^{32} - 1\n* ```\n*\n* which corresponds to the bit sequence\n*\n* ```binarystring\n* 11111111111111111111111111111111\n* ```\n*\n* @constant\n* @type {uinteger32}\n* @default 4294967295\n*/\nvar UINT32_MAX = 4294967295;\n\n\n// EXPORTS //\n\nexport default UINT32_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint32/max}\n*/\nimport MAX from './../../uint32/max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/uint32/num-bytes}\n*/\nimport NUM_BYTES from './../../uint32/num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n\n// EXPORTS //\n\nexport default constants;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Size (in bytes) of a 32-bit unsigned integer.\n*\n* @module @stdlib/constants/uint32/num-bytes\n* @type {integer32}\n*\n* @example\n* import UINT32_NUM_BYTES from '@stdlib/constants/uint32/num-bytes';\n* // returns 4\n*/\n\n\n// MAIN //\n\n/**\n* Size (in bytes) of a 32-bit unsigned integer.\n*\n* @constant\n* @type {integer32}\n* @default 4\n*/\nvar UINT32_NUM_BYTES = 4|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UINT32_NUM_BYTES;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum Unicode code point.\n*\n* @module @stdlib/constants/unicode/max\n* @type {integer32}\n*\n* @example\n* import UNICODE_MAX from '@stdlib/constants/unicode/max';\n* // returns 1114111\n*/\n\n\n// MAIN //\n\n/**\n* Maximum Unicode code point.\n*\n* @constant\n* @type {integer32}\n* @default 1114111\n* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}\n*/\nvar UNICODE_MAX = 0x10FFFF|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UNICODE_MAX;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name MAX\n* @memberof ns\n* @readonly\n* @type {number}\n* @see {@link module:@stdlib/constants/unicode/max}\n*/\nimport MAX from './../../unicode/max';\nsetReadOnly( ns, 'MAX', MAX );\n\n/**\n* @name MAX_BMP\n* @memberof ns\n* @readonly\n* @type {number}\n* @see {@link module:@stdlib/constants/unicode/max-bmp}\n*/\nimport MAX_BMP from './../../unicode/max-bmp';\nsetReadOnly( ns, 'MAX_BMP', MAX_BMP );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n*\n* @module @stdlib/constants/unicode/max-bmp\n* @type {integer32}\n*\n* @example\n* import UNICODE_MAX_BMP from '@stdlib/constants/unicode/max-bmp';\n* // returns 65535\n*/\n\n\n// MAIN //\n\n/**\n* Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n*\n* @constant\n* @type {integer32}\n* @default 65535\n* @see [Unicode]{@link https://en.wikipedia.org/wiki/Unicode}\n*/\nvar UNICODE_MAX_BMP = 0xFFFF|0; // asm type annotation\n\n\n// EXPORTS //\n\nexport default UNICODE_MAX_BMP;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name array\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/array}\n*/\nimport array from './../array';\nsetReadOnly( ns, 'array', array );\n\n/**\n* @name complex64\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/complex64}\n*/\nimport complex64 from './../complex64';\nsetReadOnly( ns, 'complex64', complex64 );\n\n/**\n* @name complex128\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/complex128}\n*/\nimport complex128 from './../complex128';\nsetReadOnly( ns, 'complex128', complex128 );\n\n/**\n* @name float16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float16}\n*/\nimport float16 from './../float16';\nsetReadOnly( ns, 'float16', float16 );\n\n/**\n* @name float32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float32}\n*/\nimport float32 from './../float32';\nsetReadOnly( ns, 'float32', float32 );\n\n/**\n* @name float64\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/float64}\n*/\nimport float64 from './../float64';\nsetReadOnly( ns, 'float64', float64 );\n\n/**\n* @name int8\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int8}\n*/\nimport int8 from './../int8';\nsetReadOnly( ns, 'int8', int8 );\n\n/**\n* @name int16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int16}\n*/\nimport int16 from './../int16';\nsetReadOnly( ns, 'int16', int16 );\n\n/**\n* @name int32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/int32}\n*/\nimport int32 from './../int32';\nsetReadOnly( ns, 'int32', int32 );\n\n/**\n* @name path\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/path}\n*/\nimport path from './../path';\nsetReadOnly( ns, 'path', path );\n\n/**\n* @name time\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/time}\n*/\nimport time from './../time';\nsetReadOnly( ns, 'time', time );\n\n/**\n* @name uint8\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint8}\n*/\nimport uint8 from './../uint8';\nsetReadOnly( ns, 'uint8', uint8 );\n\n/**\n* @name uint16\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint16}\n*/\nimport uint16 from './../uint16';\nsetReadOnly( ns, 'uint16', uint16 );\n\n/**\n* @name uint32\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/uint32}\n*/\nimport uint32 from './../uint32';\nsetReadOnly( ns, 'uint32', uint32 );\n\n/**\n* @name unicode\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/constants/unicode}\n*/\nimport unicode from './../unicode';\nsetReadOnly( ns, 'unicode', unicode );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["ns","setReadOnly","COMPLEX64_NAN","Complex64","NaN","COMPLEX64_ZERO","NAN","ZERO","COMPLEX128_NAN","Complex128","COMPLEX128_ZERO","FLOAT16_NINF","Number","NEGATIVE_INFINITY","FLOAT16_PINF","POSITIVE_INFINITY","constants","NINF","PINF","FLOAT32_CBRT_EPSILON","float64ToFloat32","E","FLOAT32_EPSILON","FLOAT32_FOURTH_PI","FLOAT32_HALF_PI","FLOAT32_LN_HALF","FLOAT32_LN10","FLOAT32_VIEW","Float32Array","Uint32Array","buffer","FLOAT32_PHI","FLOAT32_PI","FLOAT32_SQRT_EPSILON","FLOAT32_SQRT_PI","FLOAT32_SQRT2","FLOAT32_SQRT_TWO_PI","FLOAT32_TWO_PI","CBRT_EPS","EPS","FOURTH_PI","HALF_PI","LN_HALF","LN_TEN","PHI","PI","SQRT_EPS","SQRT_PI","SQRT_TWO","SQRT_TWO_PI","TWO_PI","FLOAT64_NINF","FLOAT64_PINF","SEP","IS_WINDOWS","array","complex64","complex128","float16","float32","float64","int8","int16","int32","path","time","uint8","uint16","uint32","unicode"],"mappings":";;kvBA2CA,ICPAA,EAAA,CAAA,EAWAC,EAAAD,EAAA,mBDJuB,YCevBC,EAAAD,EAAA,yBCf6B,kBCC7B,IAAIE,EAAgB,IAAIC,EAAWC,IAAKA,KCApCC,EAAiB,IAAIF,EAAW,EAAK,GCRzCH,EAAA,CAAA,EAWAC,EAAAD,EAAA,MAAAM,GAWAL,EAAAD,EAAA,YCjB0B,GD4B1BC,EAAAD,EAAA,OAAAO,GEzBA,IAAIC,EAAiB,IAAIC,EAAYL,IAAKA,KCAtCM,EAAkB,IAAID,EAAY,EAAK,GCR3CT,EAAA,CAAA,EAWAC,EAAAD,EAAA,MAAAM,GAWAL,EAAAD,EAAA,YCjB2B,ID4B3BC,EAAAD,EAAA,OAAAO,GEtBA,ICSII,EAAeC,EAAOC,kBCAtBC,EAAeF,EAAOG,kBCpB1BC,EAAA,CAAA,EAWAf,EAAAe,EAAA,WHA2B,oBGW3Bf,EAAAe,EAAA,MCPsB,aDkBtBf,EAAAe,EAAA,gBEjB4B,IF4B5Bf,EAAAe,EAAA,MG9BkB,OHyClBf,EAAAe,EAAA,mBIxC+B,MJmD/Bf,EAAAe,EAAA,oBKnDgC,ML8DhCf,EAAAe,EAAA,OAAAC,GAWAhB,EAAAe,EAAA,YMnFwB,GN8FxBf,EAAAe,EAAA,OAAAE,GAWAjB,EAAAe,EAAA,YOzGwB,IPoHxBf,EAAAe,EAAA,kBQrG8B,gBRgH9Bf,EAAAe,EAAA,qBShHiC,sBT2HjCf,EAAAe,EAAA,WUpI2B,QCG3B,ICCIG,EAAuBC,EAAkB,qBCJzCC,EAAID,EAAkB,mBCQtBE,EAAkBF,EAAkB,uBCTpCG,EAAoBH,EAAkB,mBCAtCI,EAAkBJ,EAAkB,oBCGpCK,EAAkBL,GAAkB,mBCApCM,EAAeN,EAAkB,mBCVjCO,EAAe,IAAIC,EAAc,GACnB,IAAIC,EAAaF,EAAaG,QA2BnC,GAHM,WAUnB,IAAAb,EALIU,EAAc,GCtBdI,EAAcX,EAAkB,mBCDhCY,EAAaZ,EAAkB,mBCP/BO,EAAe,IAAIC,EAAc,GACnB,IAAIC,EAAaF,EAAaG,QA2BnC,GAHM,WAUnB,IAAAZ,EALIS,EAAc,GClBdM,EAAuBb,EAAkB,sBCJzCc,EAAkBd,EAAkB,mBCEpCe,EAAgBf,EAAkB,oBCHlCgB,EAAsBhB,EAAkB,oBCAxCiB,EAAiBjB,EAAkB,mBCVvCJ,EAAA,CAAA,EAWAf,EAAAe,EAAA,WjBGuB,YiBQvBf,EAAAe,EAAA,WAAAsB,GAWArC,EAAAe,EAAA,IAAAK,GAWApB,EAAAe,EAAA,MAAAuB,GAWAtC,EAAAe,EAAA,gBCvC4B,KDkD5Bf,EAAAe,EAAA,gBEpD4B,YF+D5Bf,EAAAe,EAAA,YAAAwB,GAWAvC,EAAAe,EAAA,cGhFuB,mBH2FvBf,EAAAe,EAAA,UAAAyB,GAWAxC,EAAAe,EAAA,UAAA0B,GAWAzC,EAAAe,EAAA,QInHoB,oBJ8HpBf,EAAAe,EAAA,SAAA2B,GAWA1C,EAAAe,EAAA,SKtIkB,mBLiJlBf,EAAAe,EAAA,MM5IkB,sBNuJlBf,EAAAe,EAAA,qBOzJiC,KPoKjCf,EAAAe,EAAA,gCQpK2C,KR+K3Cf,EAAAe,EAAA,sBSrLkC,ITgMlCf,EAAAe,EAAA,iCU1L4C,IVqM5Cf,EAAAe,EAAA,qBW1MiC,UXqNjCf,EAAAe,EAAA,mBY7M+B,UZwN/Bf,EAAAe,EAAA,yBa9NqC,IbyOrCf,EAAAe,EAAA,yBc3OqC,IdsPrCf,EAAAe,EAAA,qBepPiC,If+PjCf,EAAAe,EAAA,sBgB5PiC,KhBuQjCf,EAAAe,EAAA,gCiBvQ2C,KjBkR3Cf,EAAAe,EAAA,uBkBxRkC,IlBmSlCf,EAAAe,EAAA,iCmBjS4C,InB4S5Cf,EAAAe,EAAA,oBoBrSgC,UpBgThCf,EAAAe,EAAA,MqBzTkBZ,KrBoUlBH,EAAAe,EAAA,OAAAC,GAWAhB,EAAAe,EAAA,YsBhVwB,GtB2VxBf,EAAAe,EAAA,MAAA4B,GAWA3C,EAAAe,EAAA,KAAA6B,GAWA5C,EAAAe,EAAA,OAAAE,GAWAjB,EAAAe,EAAA,YuB3XwB,IvBsYxBf,EAAAe,EAAA,YwB9XwB,YxByYxBf,EAAAe,EAAA,mByBzY+B,SzBoZ/Bf,EAAAe,EAAA,kB0B9Y8B,uB1ByZ9Bf,EAAAe,EAAA,qB2BzZiC,sB3BoajCf,EAAAe,EAAA,WAAA8B,GAWA7C,EAAAe,EAAA,Y4B1bwB,mB5BqcxBf,EAAAe,EAAA,e6Bxc2B,oB7Bmd3Bf,EAAAe,EAAA,W8BlduB,mB9B6dvBf,EAAAe,EAAA,UAAA+B,GAWA9C,EAAAe,EAAA,a+BteoB,oB/BifpBf,EAAAe,EAAA,WAAAgC,GAWA/C,EAAAe,EAAA,cAAAiC,GAWAhD,EAAAe,EAAA,SAAAkC,GgCzgBA,ICWIC,EAAevC,EAAOC,kBCJtBuC,EAAexC,OAAOG,kBCd1BC,EAAA,CAAA,EAWAf,EAAAe,EAAA,QHJY,oBGeZf,EAAAe,EAAA,UCfc,kBD0Bdf,EAAAe,EAAA,WEtB2B,uBFiC3Bf,EAAAe,EAAA,IGrCQ,mBHgDRf,EAAAe,EAAA,MIxCsB,sBJmDtBf,EAAAe,EAAA,aK3DiB,mBLsEjBf,EAAAe,EAAA,gBM7D4B,MNwE5Bf,EAAAe,EAAA,YOlFgB,mBP6FhBf,EAAAe,EAAA,kBQxF8B,gBRmG9Bf,EAAAe,EAAA,kBSxG8B,WTmH9Bf,EAAAe,EAAA,WUlHQ,oBV6HRf,EAAAe,EAAA,WW5He,oBXuIff,EAAAe,EAAA,UYzIc,oBZoJdf,EAAAe,EAAA,qBa5IiC,YbuJjCf,EAAAe,EAAA,0BcvJsC,YdkKtCf,EAAAe,EAAA,sBelKkC,Yf6KlCf,EAAAe,EAAA,6BgB7KyC,ShBwLzCf,EAAAe,EAAA,WiB7Le,mBjBwMff,EAAAe,EAAA,QkB3MY,oBlBsNZf,EAAAe,EAAA,iBmBnNqB,mBnB8NrBf,EAAAe,EAAA,OoB9NW,mBpByOXf,EAAAe,EAAA,MqBzOU,mBrBoPVf,EAAAe,EAAA,YsBpPgB,oBtB+PhBf,EAAAe,EAAA,QuBjQY,oBvB4QZf,EAAAe,EAAA,SwB5Qa,mBxBuRbf,EAAAe,EAAA,MyBhRkB,uBzB2RlBf,EAAAe,EAAA,qB0B7RiC,M1BwSjCf,EAAAe,EAAA,gC2BxS2C,M3BmT3Cf,EAAAe,EAAA,sB4BzTkC,K5BoUlCf,EAAAe,EAAA,iC6BhU4C,K7B2U5Cf,EAAAe,EAAA,S8BvUqB,kB9BkVrBf,EAAAe,EAAA,qB+BzViC,kB/BoWjCf,EAAAe,EAAA,mBgC5V+B,kBhCuW/Bf,EAAAe,EAAA,iBiC/W6B,kBjC0X7Bf,EAAAe,EAAA,yBkC1XqC,IlCqYrCf,EAAAe,EAAA,qBmCnYiC,InC8YjCf,EAAAe,EAAA,sBoC3YiC,MpCsZjCf,EAAAe,EAAA,gCqCtZ2C,MrCia3Cf,EAAAe,EAAA,uBsCnakC,KtC8alCf,EAAAe,EAAA,iCuClb4C,KvC6b5Cf,EAAAe,EAAA,UwCrbsB,mBxCgctBf,EAAAe,EAAA,oByC/bgC,kBzC0chCf,EAAAe,EAAA,M0CndkBZ,K1C8dlBH,EAAAe,EAAA,OAAAC,GAWAhB,EAAAe,EAAA,Y2C1ewB,G3CqfxBf,EAAAe,EAAA,M4CnfU,mB5C8fVf,EAAAe,EAAA,K6C/fS,mB7C0gBTf,EAAAe,EAAA,a8C1gBiB,mB9CqhBjBf,EAAAe,EAAA,OAAAE,GAWAjB,EAAAe,EAAA,Y+ChiBwB,I/C2iBxBf,EAAAe,EAAA,kBgD7hB8B,wBhDwiB9Bf,EAAAe,EAAA,qBiDxiBiC,QjDmjBjCf,EAAAe,EAAA,WkD5jB2B,uBlDukB3Bf,EAAAe,EAAA,YmDzkBgB,mBnDolBhBf,EAAAe,EAAA,eoDvlBmB,oBpDkmBnBf,EAAAe,EAAA,WqDjmBe,mBrD4mBff,EAAAe,EAAA,UsD5mBc,mBtDunBdf,EAAAe,EAAA,auDrnBY,oBvDgoBZf,EAAAe,EAAA,WwDhoBY,oBxD2oBZf,EAAAe,EAAA,cyD9oBkB,oBzDypBlBf,EAAAe,EAAA,S0DzpBa,mBCab,ICnBAA,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQe,KCGff,EAAAe,EAAA,OCHe,KDcff,EAAAe,EAAA,YE5BqB,GCcrB,ICnBAA,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQgB,OCGhBf,EAAAe,EAAA,OCHgB,ODchBf,EAAAe,EAAA,YE5BsB,GCctB,ICnBAA,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQgB,YCGhBf,EAAAe,EAAA,OCHgB,YDchBf,EAAAe,EAAA,YE5BsB,GCEtB,ICgBAqC,EATKC,ECRgB,KCAA,ICNrBtD,EAAA,CAAA,EAUAC,EAAAD,EAAA,YCQKsD,ELXsB,IMAA,KFa3BrD,EAAAD,EAAA,kBEb2B,KFuB3BC,EAAAD,EAAA,kBJvB2B,KIiC3BC,EAAAD,EAAA,MAAAqD,GAUApD,EAAAD,EAAA,YD5CqB,KCsDrBC,EAAAD,EAAA,YFtDqB,MKDrB,ICLAA,EAAA,CAAA,EAWAC,EAAAD,EAAA,eDNmB,ICiBnBC,EAAAD,EAAA,gBCboB,KDwBpBC,EAAAD,EAAA,sBExB0B,OFmC1BC,EAAAD,EAAA,uBGnC2B,MH8C3BC,EAAAD,EAAA,yBI9C6B,KJyD7BC,EAAAD,EAAA,yBK7D6B,KLwE7BC,EAAAD,EAAA,uBMpE2B,QN+E3BC,EAAAD,EAAA,iBO/EqB,MP0FrBC,EAAAD,EAAA,kBQ9FsB,IRyGtBC,EAAAD,EAAA,kBSrGsB,OTgHtBC,EAAAD,EAAA,iBUpHqB,IV+HrBC,EAAAD,EAAA,iBW3HqB,OXsIrBC,EAAAD,EAAA,kBYtIsB,MZiJtBC,EAAAD,EAAA,oBarJwB,IbgKxBC,EAAAD,EAAA,kBc5JsB,QCUtB,ICnBAgB,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQgB,KCGhBf,EAAAe,EAAA,YCjBsB,GCctB,ICnBAA,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQiB,OCGjBf,EAAAe,EAAA,YCjBuB,GCcvB,ICnBAA,EAAA,CAAA,EAWAf,EAAAe,EAAA,MDQiB,YCGjBf,EAAAe,EAAA,YCjBuB,GCCvB,ICNAhB,EAAA,CAAA,EAUAC,EAAAD,EAAA,MDJkB,SCclBC,EAAAD,EAAA,UCdsB,OCNtB,IAAAA,EAAA,CAAA,EAUAC,EAAAD,EAAA,QAAAuD,GAUAtD,EAAAD,EAAA,YAAAwD,GAUAvD,EAAAD,EAAA,aAAAyD,GAUAxD,EAAAD,EAAA,UAAA0D,GAUAzD,EAAAD,EAAA,UAAA2D,GAUA1D,EAAAD,EAAA,UAAA4D,GAUA3D,EAAAD,EAAA,OAAA6D,GAUA5D,EAAAD,EAAA,QAAA8D,GAUA7D,EAAAD,EAAA,QAAA+D,GAUA9D,EAAAD,EAAA,OAAAgE,GAUA/D,EAAAD,EAAA,OAAAiE,GAUAhE,EAAAD,EAAA,QAAAkE,GAUAjE,EAAAD,EAAA,SAAAmE,GAUAlE,EAAAD,EAAA,SAAAoE,GAUAnE,EAAAD,EAAA,UAAAqE"}